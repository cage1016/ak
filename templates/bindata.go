// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/ak.json.tmpl (553B)
// tmpl/cliitems.main.tmpl (162B)
// tmpl/cliitems.root.tmpl (1.491kB)
// tmpl/cliitems.update.tmpl (503B)
// tmpl/dotenv.tmpl (157B)
// tmpl/info.plist.tmpl (872B)
// tmpl/items.main.tmpl (1.519kB)
// tmpl/release.yaml.tmpl (1.452kB)
// tmpl/varsArgs.main.tmpl (298B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplAkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xb1\x6e\xc3\x30\x0c\x44\xf7\x7c\x05\xe1\x59\x88\x77\xff\x41\xb7\x0e\xed\x2c\xc8\x12\x63\x0b\xb1\x45\x81\xa4\x13\x18\x45\xfe\xbd\x48\x6c\xa7\x89\xdc\xf5\xee\xf8\x44\x9e\x7e\x0e\x00\x00\x55\x47\x76\xa4\x60\xb3\xf3\x67\xd7\x61\xd5\x40\x55\x99\xc5\xb9\x12\x9f\x4f\x03\x5d\xab\x06\x96\xec\x43\x3d\xd1\x10\x90\xef\xb9\xe3\x33\x60\xfe\xec\xe4\xc6\x57\xc8\x43\x0b\x28\x9e\x63\xd6\x48\xa9\xb4\xbc\x53\xec\x88\x67\xeb\x69\x1c\x31\xe9\xdd\xdf\xb4\x06\xbe\x88\x06\x31\xf0\x91\x14\x39\xa1\x1a\xf8\x64\x0a\x93\xd7\x78\x89\x3a\x1b\xf8\x4e\x6b\x34\x0a\x86\xff\xa8\xe5\x6b\xed\x94\xc2\x80\x36\x86\xdd\x1a\x8c\x4e\x31\xd8\x76\x37\x72\xc5\xd6\xba\x10\x18\x45\x4a\xeb\x82\x2c\xdb\x49\x0f\xf5\xb6\x16\x37\xe5\xe0\x14\xdf\x6b\xeb\xa2\xf6\x53\x6b\x19\x33\xed\x07\x86\xe8\x31\x49\x31\xa1\x73\xc6\xd7\x5a\x64\xca\x99\x58\x61\x0d\x43\xaf\x9a\xa5\xa9\xeb\x85\x7c\xf4\x34\xd6\x29\x4a\xef\x92\xf6\x52\x6f\x44\xf3\xce\x2b\x4f\x98\xd1\x71\xa9\x3d\x7f\x70\x59\xf1\x70\xfb\x0d\x00\x00\xff\xff\x0c\x1c\x16\x54\x29\x02\x00\x00"

func tmplAkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplAkJsonTmpl,
		"tmpl/ak.json.tmpl",
	)
}

func tmplAkJsonTmpl() (*asset, error) {
	bytes, err := tmplAkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/ak.json.tmpl", size: 553, mode: os.FileMode(0644), modTime: time.Unix(1659397508, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0xb8, 0xff, 0xe8, 0xca, 0xef, 0xb2, 0xbb, 0x10, 0xc0, 0x58, 0x27, 0xb3, 0xae, 0xa9, 0x63, 0x63, 0x2d, 0xd8, 0x7d, 0x88, 0x32, 0x44, 0x6f, 0x13, 0xa5, 0x37, 0x59, 0xbb, 0xa3, 0x8c, 0x44}}
	return a, nil
}

var _tmplCliitemsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x31\x0e\x02\x21\x10\x00\xc0\xfa\xf6\x15\x84\xea\xee\x0a\x78\x83\x31\xc6\xca\xc4\xd6\xca\x20\x20\xa0\x72\x4b\xc8\x62\x34\x64\x1f\xe4\x37\x7c\x99\x51\xbb\xa9\x46\xcf\xb0\xc6\xf2\xac\x29\x44\x12\xef\x97\xe8\x5d\x1d\xbc\xa9\xcc\x5f\xad\x1a\x45\xac\xcc\x30\x6b\x28\xc6\x5e\x4d\xf0\x22\x9b\xb4\x00\xa4\x5c\xb0\x92\x18\x61\x38\x0a\x19\x12\xc5\x76\x52\x16\xb3\xbe\x60\x44\x1d\xd0\x21\xf9\xe5\xae\x4d\x23\xbc\xa1\x71\x12\x60\x90\xbd\xab\x2d\xee\xd0\xed\xff\x11\xb3\xb6\xd9\x49\x98\x00\xce\x6d\xb1\xbf\x77\x9c\x44\x87\xc1\x66\xa7\x36\x0f\x6f\x1b\xf9\x71\x02\xfe\x04\x00\x00\xff\xff\x8e\x52\x7f\x95\xa2\x00\x00\x00"

func tmplCliitemsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsMainTmpl,
		"tmpl/cliitems.main.tmpl",
	)
}

func tmplCliitemsMainTmpl() (*asset, error) {
	bytes, err := tmplCliitemsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.main.tmpl", size: 162, mode: os.FileMode(0644), modTime: time.Unix(1659395971, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xf6, 0x3a, 0xee, 0xc7, 0xe, 0x2d, 0x59, 0x9e, 0xe8, 0xb5, 0xcd, 0x3d, 0xf1, 0x82, 0xef, 0x94, 0x9e, 0x81, 0xaa, 0x5d, 0x85, 0xf2, 0xbd, 0xc1, 0xc4, 0xbe, 0xea, 0x1c, 0xbd, 0xa2, 0xdb}}
	return a, nil
}

var _tmplCliitemsRootTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8e\xe4\x34\x10\x3e\xc7\x4f\x51\x63\x89\x91\x33\xb4\x1c\x56\xdc\x1a\xf5\xa1\xe9\x99\x65\x1b\xa1\x15\xea\x61\x16\xa1\xd5\x1e\x1c\xa7\x92\x58\xe3\xd8\x91\x7f\x36\xd3\x6a\xe5\x0a\x4f\xc2\x61\x5f\x83\x47\xd9\x27\x41\x4e\xd2\xb3\xf4\x20\x38\x24\x8a\xaa\xbe\xfa\xfb\xea\xab\x14\x37\x64\x67\xfb\xa3\x53\x4d\x1b\xe0\xaf\x4f\x70\x3a\xf1\xdf\x50\xb8\x71\x4c\x5f\xdb\x18\x5a\xeb\xc6\x91\x90\x9b\x82\xf4\x42\x3e\x8a\x06\x41\x76\x15\x21\xaa\xeb\xad\x0b\xc0\x48\x46\xb5\x6d\x28\xc9\xa8\xf5\xf3\xbb\xc0\x27\x94\x94\x90\x4c\x0c\x40\x1b\x15\xda\x58\x72\x69\xbb\xa2\x42\x61\x94\x6f\xb1\x10\x43\x63\x13\xf4\xbf\x7c\x45\xec\x2b\x11\xf0\x05\xc4\xf7\xf5\xab\x6f\x0b\x69\x4b\x27\x28\xc9\x09\x91\xd6\xf8\x00\x33\xf4\x47\x5b\xbe\x15\x1d\xc2\x06\xa8\x6c\x51\x3e\xbe\xb6\xee\x61\xc9\x41\x3e\x0a\x97\xba\x74\xd8\xdb\xe4\x3f\x9d\xf8\x0f\x53\xd2\x03\xf6\x76\x1c\x29\xc9\x86\x1a\x00\x6e\xc4\xc0\x7f\xb5\xee\xb1\xd6\x76\x48\xd9\xeb\x68\x24\xec\x2e\x72\xb1\x1c\x4e\x24\x53\x35\x0c\x35\x9f\x2d\x93\xff\x36\x26\xcf\xf5\x35\x5c\x0d\x35\xdf\xfb\x43\x34\x46\x99\x86\x5d\x34\x36\x45\x66\xda\x36\xfc\x67\xa7\x4c\xd0\x86\xd1\x05\xb7\x0c\x00\x53\xdb\xa0\x0c\x94\x42\x3e\x36\xce\x46\x53\x71\xce\x69\x4e\xb2\x4c\x76\x15\xac\x37\x90\x58\xe5\x3b\xdb\x75\xc2\x54\xcc\x7a\xbe\x75\x8d\x7f\xff\xcd\x87\x15\xd0\x85\xae\x84\x55\x35\xa0\x73\x09\x3e\xd4\xfc\x10\xcd\xde\x7c\xff\x9c\xef\xb2\xa5\x55\x5a\x63\xfe\xdd\x04\xbf\xda\x80\x51\x7a\xea\xf1\x4b\x93\x35\xa3\x77\xce\x59\x07\x3e\x08\x17\x5e\xb6\xba\x86\xaf\x3c\x5d\xa5\xe8\x54\x76\x24\xd9\x48\x2e\xb9\xd9\x7e\x14\x4a\x8b\x52\x2f\xb4\x65\x43\xcd\x77\xd6\xd4\xaa\x89\x0e\x99\x18\xf8\x7d\xec\x7b\x87\xde\x3f\xec\x6f\x3d\x0b\x2e\x62\x9e\xcf\xa8\xb7\x38\xec\x03\x76\x8c\x6e\xcd\xb9\xa2\xf2\x20\xce\xe9\xae\x68\xce\x53\x9f\xf7\xb1\x0c\x2a\x68\x64\xf4\xf3\x1f\x7f\x82\x75\xf0\xf9\xf7\x4f\x10\x2c\x28\xe3\x83\xd0\x1a\xce\xa4\x4c\xe0\x77\x42\xab\x8a\xd5\x42\x7b\x9c\x0d\xdb\x18\xac\xb4\x5d\xaf\x31\x20\xa3\xc3\xb2\xf8\xf5\x45\xd0\x5e\x5a\xc3\xae\xc5\xc0\xd3\xc7\xe9\x9d\xd0\x11\xd7\x40\x2b\x3b\x18\x6d\x45\xc5\xfb\xaa\xa6\x63\x9e\x06\x1f\x09\x29\x0a\x70\xd6\x86\x5d\x57\x81\xc3\x34\x17\x9a\xe0\x21\xb4\x08\xa5\xf0\x08\x72\x5e\x1b\x0c\x2d\x1a\x90\x42\x6b\xac\x60\x50\xa1\xb5\x31\x80\x30\x47\xf0\xb1\x5c\x20\x7e\xd2\xeb\x39\xd7\x06\xae\x27\xc1\x9f\xf7\x7e\x22\xd9\x83\xc7\x35\xc0\xa4\xe3\xb4\xc6\x71\xa4\x2b\x92\xdd\xb7\xd6\x85\xf5\x64\xbc\x45\x2f\x9d\xea\x83\xb2\x66\xf6\x1d\xa2\x59\x43\x92\x33\x4b\x42\xba\xb9\xc8\xb7\x02\xe1\x1a\x0f\xef\x3f\xf8\xe0\x94\x69\xe6\x4d\xbd\x54\xfd\xbc\x96\x7b\x34\xd5\x6b\xc4\x2a\xe9\x33\xd9\xc6\xd5\x32\xf7\xdd\x13\xca\x18\x10\x44\x55\x79\x48\xcc\xcb\x56\xe9\xea\x3c\xb2\x4f\x3b\x49\x3c\xa4\x91\x9e\x79\x48\x8f\xc7\xe0\xa1\xd6\xa2\xf1\x20\xfa\xde\xd9\xde\x29\x11\x50\x1f\x79\x4a\xfa\x4b\xab\x7c\x5a\xfb\xc2\x55\x79\x84\x4e\x28\xc3\xd3\x8b\xe5\x1c\xf6\x01\xac\xd1\x47\x30\x88\x73\x85\x56\xf4\x3d\x1a\xb0\x46\xe2\x3f\x0b\xee\xba\x8a\xcf\xa7\xbc\x74\x39\x8b\x71\xbe\x0d\x36\x91\x32\xcf\xfc\xe5\x6e\xce\x61\xcf\x01\xff\x73\x22\xda\xb0\xe5\x00\x32\xeb\xf9\xdd\x93\x0a\xec\xd5\xf9\x1c\xf2\x44\xcf\x54\x5a\x19\x15\xce\x75\x61\x03\x62\x48\x12\x5f\x8e\x31\xfd\x8b\xde\xc4\x92\xa5\xbf\x53\xbe\x4a\xbe\x37\xa8\xfb\x87\xc3\x4f\x93\xe5\x6b\x5a\x28\xef\x23\x7a\x9a\x8e\x63\xa8\xa7\x9b\x67\x39\x14\x05\x74\xa2\x51\x12\x6a\xeb\xe0\x5f\xea\x25\xe3\xdf\x01\x00\x00\xff\xff\xf8\xf5\x1d\xd8\xd3\x05\x00\x00"

func tmplCliitemsRootTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsRootTmpl,
		"tmpl/cliitems.root.tmpl",
	)
}

func tmplCliitemsRootTmpl() (*asset, error) {
	bytes, err := tmplCliitemsRootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.root.tmpl", size: 1491, mode: os.FileMode(0644), modTime: time.Unix(1659400145, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0xde, 0x20, 0x44, 0xfe, 0x11, 0x6e, 0xa3, 0x18, 0x58, 0x2, 0xf4, 0x38, 0x8e, 0x8d, 0x6d, 0xab, 0x10, 0xcd, 0x3c, 0xab, 0xb8, 0x9a, 0x39, 0x93, 0xdb, 0x0, 0x65, 0x62, 0xa9, 0x62, 0x91}}
	return a, nil
}

var _tmplCliitemsUpdateTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x8a\xd5\x30\x14\x86\xd7\x39\x4f\x71\xcc\x42\xd2\xcb\x25\x45\xdc\x5d\xb9\x8b\xa1\x38\x4b\x11\x75\x16\x22\x2e\x32\xcd\x69\x1a\xa6\x49\xca\x49\xea\x55\x4a\x1e\xc8\xd7\xf0\xc9\xa4\xbd\xa3\xdc\xd9\x05\xbe\x9f\xef\xff\x4f\xda\x03\x74\x69\xfe\xc5\xde\x8d\x05\xff\xfc\xc6\x75\xd5\x5f\xc9\x70\xad\xdb\xeb\x6e\x29\x63\xe2\x5a\x01\x0e\x2d\xcc\xa6\x7f\x32\x8e\xb0\x0f\x16\xc0\x87\x39\x71\x41\x05\x42\x4e\xc9\x49\x00\x61\x2e\x28\x9d\x2f\xe3\xf2\xa8\xfb\x14\x5a\x4b\x26\xfa\x3c\x52\x6b\x2e\x2e\x49\x10\xb7\x2c\xcf\xc3\x9b\xb7\x6d\x9f\x1e\xd9\x48\x68\x00\xda\x16\x97\xd9\x9a\x42\x5d\xb0\xc8\x34\x33\x65\x8a\x25\x63\x19\xe9\x19\x60\x9f\x42\x30\xd1\xc2\x0f\xc3\x37\xd9\x33\xbe\xde\x2d\xba\xbb\xe2\x15\xc4\x43\xa6\x13\x22\xca\x6b\x48\x1e\x41\x7c\x1e\x13\x97\x13\xca\x87\xab\x69\x5d\xf5\x07\x13\xa8\xd6\x8d\x7d\x5a\xe2\x09\x87\x25\xf6\xaa\x0f\x16\x0f\x2f\x64\x47\x34\xec\x32\x7e\xfb\x9e\x0b\xfb\xe8\x1a\x5c\x41\x88\xcb\xa0\xbb\x14\x07\xef\x16\x26\x65\x2e\xfa\x0b\xfd\x2c\xef\x99\x13\x67\x55\x78\xa1\xa6\x01\x21\xa6\xe4\xf4\x47\xf6\xb1\x4c\x51\xc9\x6e\xa4\xfe\xc9\x47\x87\x43\xfa\xb7\x3c\x6b\xad\xe5\x16\xf4\x03\x12\x33\x9e\xce\xb8\x69\xb7\xe0\x7d\xe2\xeb\x4c\xd5\xbc\xdb\xd9\xab\x33\x46\x3f\xed\xd5\x5b\xf7\xbd\x29\x66\xda\xfb\x14\x31\x6f\x8e\x0a\xa2\x1e\xa1\x02\x6c\x57\xa0\x8f\xbe\xa8\x7d\x29\xa7\x54\xba\x60\xf5\x9d\xb5\xcf\xf7\xa8\xff\xff\xd6\x40\xfd\x1b\x00\x00\xff\xff\x8a\xd6\x7e\xaf\xf7\x01\x00\x00"

func tmplCliitemsUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsUpdateTmpl,
		"tmpl/cliitems.update.tmpl",
	)
}

func tmplCliitemsUpdateTmpl() (*asset, error) {
	bytes, err := tmplCliitemsUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.update.tmpl", size: 503, mode: os.FileMode(0644), modTime: time.Unix(1659400155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xa9, 0xbd, 0x7e, 0x29, 0x7, 0x93, 0xc4, 0x44, 0x40, 0x39, 0xaa, 0xf7, 0x50, 0x7b, 0x92, 0xb4, 0xb, 0x94, 0x27, 0x97, 0x12, 0x7d, 0x71, 0x4a, 0x2c, 0xc4, 0x55, 0xca, 0x7b, 0x68, 0x30}}
	return a, nil
}

var _tmplDotenvTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcc\x49\x2b\x4a\x4d\x89\x2f\xcf\x2f\xca\x4e\xcb\xc9\x2f\x8f\x4f\x2a\xcd\x4b\xc9\x49\xcd\x4c\xb1\x55\xaa\xae\xd6\x73\x02\x73\x3c\x5d\x6a\x6b\x95\xb8\xd0\x15\xa6\x24\x96\x24\xda\x2a\xe9\xe9\x97\xa4\x16\x97\xa4\xe6\x95\xe9\x83\xf8\x98\xaa\x92\x13\x93\x33\x52\x91\x95\x81\x05\x30\xd5\x95\xa5\x16\x15\x67\xe6\xe7\x81\x6d\x0d\x83\xb0\x6b\x6b\x95\x00\x01\x00\x00\xff\xff\x62\x86\xbb\xd0\x9d\x00\x00\x00"

func tmplDotenvTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDotenvTmpl,
		"tmpl/dotenv.tmpl",
	)
}

func tmplDotenvTmpl() (*asset, error) {
	bytes, err := tmplDotenvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dotenv.tmpl", size: 157, mode: os.FileMode(0644), modTime: time.Unix(1659356539, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xd1, 0x5a, 0xd0, 0xa5, 0x5a, 0xc4, 0x1, 0x23, 0xc1, 0xe6, 0xf8, 0x29, 0x47, 0xda, 0x4, 0x37, 0x5b, 0x8c, 0x17, 0xe9, 0x18, 0xf0, 0x6f, 0x95, 0xdf, 0x18, 0xbc, 0x32, 0x48, 0xfd, 0xff}}
	return a, nil
}

var _tmplInfoPlistTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\x9b\x30\x10\x85\xcf\xf0\x2b\x5c\xdf\x63\x27\xb7\xaa\xf2\xb2\xda\x84\xad\x14\x29\xda\x22\x95\xb4\xea\xd1\xd8\x13\xea\x16\x6c\x64\x9b\x52\x84\xf8\xef\x15\x21\x59\x92\xad\xa5\xf6\x66\xcf\x9b\xf7\xcd\x3c\xcb\xec\xf1\x77\x5d\xa1\x5f\x60\x9d\x32\xfa\x01\x6f\xc8\x1a\x23\xd0\xc2\x48\xa5\xcb\x07\x7c\xcc\x3f\xae\xde\xe3\xc7\x24\x66\xef\xd2\x4f\xbb\xfc\x5b\xf6\x8c\x9a\x4a\x39\x8f\xb2\xe3\xf6\xb0\xdf\x21\xbc\xa2\xf4\xa9\x69\x2a\xa0\x34\xcd\x53\x94\x1d\xf6\x9f\x73\xb4\x21\x6b\x4a\x9f\x5f\x30\xc2\xdf\xbd\x6f\x3e\x50\xda\x75\x1d\xe1\x53\x17\x11\xa6\x9e\x1a\x1d\xcd\xac\x69\xc0\xfa\xfe\xa0\x9c\x5f\x6d\xc8\x9a\x48\x2f\x71\x12\xb3\x99\x7e\xb7\x4e\x12\x47\x4c\x2a\xe1\x93\x38\x8a\xd8\x4f\xe8\x93\xa2\xd5\xb2\x02\x25\x19\x9d\x6e\x53\xd5\x79\xab\x74\x99\x0c\x03\xd9\x9e\xb5\x7d\x3a\x8e\x8c\x5e\xaa\x71\x14\x0d\x83\x3a\x21\x0d\x88\xec\xb8\x87\xd2\xd8\x1e\xe1\xa3\x16\xf3\x59\x39\x90\x78\x1c\xaf\xf0\x4b\xb5\x0f\xc1\xaf\xee\xb7\x70\xd0\xf2\x06\x60\xb4\x06\xe1\x95\xd1\x6e\x61\xbc\xee\x4f\xef\x92\x08\x0b\xdc\x83\x2c\xc2\xd3\x66\x71\xfb\x66\xdc\xd9\x28\xc1\x09\xab\x9a\x69\x4a\xc8\x9a\x2e\x72\xc8\xac\x1c\x2f\x2a\xb8\x79\xbf\x13\xaf\x1c\xd0\xd7\x06\xcd\x6b\x08\x61\x5f\x78\x0d\x01\x9e\x29\x7e\x80\xf0\x37\x69\xb9\xb5\x7c\x3e\xd1\xe5\x38\x89\x16\xb8\xfc\x1b\xbd\x0c\x6e\x95\xe4\x9e\xff\xf3\xd9\x5a\x07\x56\x18\x7d\x52\x65\x6b\xf9\x14\x72\xbe\xfc\xc7\x02\x97\x8f\x15\x0a\xf7\x65\x96\x02\xf9\x3a\x28\xb8\x94\x16\x9c\x0b\xf9\xbe\x42\xf1\x34\xab\x77\xd6\xeb\xca\x8c\x9e\xbf\x74\xf2\x27\x00\x00\xff\xff\xf5\xfa\xe2\xd1\x68\x03\x00\x00"

func tmplInfoPlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplInfoPlistTmpl,
		"tmpl/info.plist.tmpl",
	)
}

func tmplInfoPlistTmpl() (*asset, error) {
	bytes, err := tmplInfoPlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/info.plist.tmpl", size: 872, mode: os.FileMode(0644), modTime: time.Unix(1659272503, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x5f, 0xbf, 0x7e, 0x78, 0x1c, 0x70, 0x6f, 0xf6, 0x60, 0x16, 0xfa, 0x1, 0xf9, 0xc4, 0x7, 0xce, 0x51, 0x36, 0x6e, 0x23, 0xf, 0xa9, 0x3a, 0x57, 0x76, 0x95, 0x15, 0x62, 0xbd, 0xe6, 0xef}}
	return a, nil
}

var _tmplItemsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8e\xe3\x44\x10\x3e\xbb\x9f\xa2\xa6\x25\x46\xed\x21\x38\xcb\x35\x28\x87\x90\x65\xd8\x20\xb4\x42\x33\xcc\x22\x34\x8a\x56\x1d\xbb\xec\x34\xd3\xee\xb2\xfa\x67\xbc\x10\x59\xe2\x04\x67\x9e\x80\x13\x87\x7d\x0d\x1e\x65\x9f\x80\x47\x40\xdd\x4e\x66\xd7\x33\xb0\x97\xc4\x72\x7d\xfe\xea\xab\xef\xab\xee\xf9\x05\x5b\x53\xf7\xb3\x55\xcd\xde\xc3\xdf\x6f\xe1\x70\x28\x7e\x44\x69\x87\x21\x3e\xad\x82\xdf\x93\x1d\x06\xc6\x2e\xe6\xac\x93\xe5\x9d\x6c\x10\x5a\xa9\x0c\x63\xaa\xed\xc8\x7a\x10\x2c\xe3\x68\x2d\x59\xc7\x59\xc6\x35\x35\xf1\x8f\xdc\xf8\x3b\xc7\x37\x58\x72\xc6\x32\xd9\x03\x6f\x94\xdf\x87\x5d\x51\x52\x3b\xaf\x50\x1a\xe5\xf6\x38\x97\x7d\x43\x11\xfa\x7f\xb5\x79\xe8\x2a\xe9\x91\xb3\xec\xf5\x84\xe0\x27\xda\xd3\xbc\xa1\x8a\x3c\x9a\xfb\xb9\x0c\x9e\x34\xc9\x8a\xb3\x9c\xb1\x92\x8c\xf3\x30\x7e\xf7\x0d\xed\x5e\xca\x16\x61\x09\xbc\xdc\x63\x79\x77\x49\xf6\xe6\x48\xc8\xee\xa5\x8d\xe2\x2d\x76\x14\xeb\x87\x43\xf1\x75\xe2\xbf\xc2\x8e\x86\x81\xb3\xac\xaf\x01\xe0\x42\xf6\xc5\x0f\x64\xef\x6a\x4d\x7d\x64\xaf\x83\x29\x41\x19\xe5\x45\x0e\x87\x84\x59\x82\xec\x8b\x97\xd8\x8b\xb1\x65\x64\x79\x11\x76\x22\xf2\xe6\xb3\x58\x7b\x81\xba\xbb\xb9\xfa\x36\xbd\xf9\x94\xcf\x95\x73\x01\x1d\xcf\x73\x36\x1c\xe9\x6c\x30\x23\x9b\xb4\x8d\x83\xc5\x12\xfa\xba\x58\xd9\xc6\x89\x9c\x65\xaa\x06\x8d\x46\xc4\x4a\x0e\xcb\x25\x3c\x8b\xb8\xac\xaf\x8b\x4b\xe9\xa5\xfe\x2a\x1a\x2f\x46\xfb\x93\x06\xde\x69\x94\x0e\xa1\xb3\x74\xaf\x2a\x04\x47\x2d\x82\x32\x5d\xf0\xf0\xcf\x9f\x7f\xfc\x1a\xbb\x66\x03\x63\xd9\x5e\x9a\x4a\xa3\x4d\xdd\x5a\xd9\xdd\x3a\x6f\x95\x69\xb6\x51\x8e\xf8\x70\xe4\x19\xdc\x6e\xc7\x5a\x1e\xfb\xf2\x63\x1c\x0b\x48\xc8\xbe\x86\x29\xf8\xf5\x7b\x78\xd2\x19\x85\xae\xc9\xd4\xaa\x09\x16\x85\xec\x8b\xef\xf1\x8d\x4f\xa2\x9d\xf0\x36\x60\x94\x93\x65\x9a\x9a\xe2\x3b\xab\x8c\xd7\x46\xf0\x75\xcc\x49\x99\x06\x6a\xb2\xc7\x14\x5d\x51\x14\x3c\x21\x55\x0d\x68\xed\xd1\xa2\xf5\x24\x51\x91\x7f\x91\x6a\x67\x4b\x30\x4a\x8f\xdd\x9f\xfa\x94\x58\xa2\x01\xa9\x76\x8d\xa6\xba\x44\xac\x76\xb2\xbc\x8b\x66\x67\xc3\x6c\xb4\x47\xd5\xb1\xc1\x48\x9c\xda\x3c\x0f\x28\x72\x38\x3f\x87\xb3\xbe\x2e\x36\xee\x2a\x18\xa3\x4c\x23\x26\x5b\x36\x8e\x3c\x19\xe6\x88\x3b\xce\x01\x69\x07\x41\x19\x88\x0d\x1b\x4b\xc1\x54\xa7\xd1\xca\xb6\x8a\x63\xc5\xf3\x52\xac\xa9\x6d\xa5\xa9\x04\xb9\xb4\x06\xb7\xcf\xb6\x33\x38\x39\x1f\xb1\x13\x17\xae\x82\xd9\x98\x2f\x1f\xf8\xa6\x92\x66\x50\xb6\xd5\x7f\x18\xf3\x20\xb2\x16\x3c\x79\x03\xce\x4b\xeb\x1f\x4b\x5d\xc0\x27\x8e\xcf\xe0\xe8\xdb\xf0\xd4\x9b\xd5\xbd\x54\x5a\xee\x34\x8e\xfb\xfb\x24\xee\xeb\xd0\x75\x16\x9d\xbb\xd9\x3c\xff\x20\xf0\x89\x45\x23\x11\xc8\x13\xd3\x59\x1a\xb1\xaf\xe3\x3a\x6f\x3c\xb6\x82\xaf\xcc\x49\x94\x72\x13\x5c\x11\x47\xb9\x0e\x3b\xaf\xbc\x46\xc1\xdf\xfd\xfe\x17\x90\x85\x77\xbf\xbd\x05\x4f\xa0\x8c\xf3\x52\x6b\x38\xf9\x96\xc0\xaf\xa4\x56\x95\xa8\xa5\x76\x38\xbe\x58\x05\x4f\x25\xb5\x9d\x46\x8f\x82\xf7\xc7\x45\x5e\x4c\x3e\xda\x94\x64\xc4\xb9\xec\x8b\xf8\x70\x78\x25\x75\xc0\xc5\x29\x8f\xcf\x1e\xf4\x14\x9d\x69\xf8\x70\x3a\x5e\x33\xa8\x63\x1a\x31\xa3\xd3\x51\xbb\x95\x63\x96\xdb\x64\xe1\xd9\x58\xff\xf8\x61\x2e\xc7\x45\x00\x43\x1e\x2c\x96\xd4\x18\xf5\x0b\x56\x8f\x4e\xb2\xe8\xeb\x19\x24\xee\xcf\x17\xdb\xf7\x97\x4a\xbc\xa4\x4f\x77\x54\x5c\x12\x61\x83\x89\xd5\x7f\x03\x00\x00\xff\xff\x19\xe2\xbe\x5f\xef\x05\x00\x00"

func tmplItemsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplItemsMainTmpl,
		"tmpl/items.main.tmpl",
	)
}

func tmplItemsMainTmpl() (*asset, error) {
	bytes, err := tmplItemsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/items.main.tmpl", size: 1519, mode: os.FileMode(0644), modTime: time.Unix(1659396195, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x24, 0x3a, 0xfe, 0xed, 0x4e, 0xe, 0x90, 0xd3, 0x30, 0x0, 0xd4, 0x8c, 0x5e, 0x2e, 0xc8, 0x6, 0xdf, 0xc6, 0x6c, 0xbc, 0xb6, 0x67, 0xf2, 0x41, 0xca, 0xf3, 0xca, 0x99, 0xbb, 0xf5, 0x25}}
	return a, nil
}

var _tmplReleaseYamlTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4f\xdc\x30\x10\xbd\xef\xaf\x18\xa5\x48\xc0\xc1\x8e\x16\xa1\x16\x45\x42\x02\x2a\xb4\x70\x61\x11\xd0\xf6\x80\xda\xc5\x9b\xcc\x26\x01\x27\x4e\x3d\xf6\xee\xd2\x90\xff\x5e\xe5\x3b\x41\xa0\x72\x68\x4e\xf1\xcc\x9b\xe7\x37\xe3\x37\xa9\x48\xd0\x83\x1b\x94\x28\x08\x27\x2a\xf5\x26\x00\xba\x3e\x95\xbf\x00\xe6\x39\x43\xaa\x7f\x01\x18\x64\x76\x29\x63\x8a\x30\x98\x4c\x1e\xd5\xb2\x4a\x2c\x6d\x2c\x83\x1a\x41\x46\x0b\x83\xe1\x73\x8b\x4f\x84\xd1\xf1\xb6\x3d\x01\x84\x8a\xad\x51\x53\xac\x52\x0f\xee\xa7\x7c\xfa\x85\x6f\x7f\x76\xc9\x4c\x0a\xb3\x52\x3a\xf1\xe0\x3e\x11\xfe\xfc\x96\x49\x61\x90\x4c\x0d\xd0\x36\x25\x56\x96\xe5\xf9\xc3\x4e\x9e\x37\xcc\xbc\xad\x81\xa2\x78\x28\x8a\x46\x03\x66\x03\xc1\x96\x90\x3c\x10\xbe\x89\x55\x4a\xae\x1f\xa1\xff\xa4\xac\x39\x59\x1f\x74\x88\x7a\x04\x97\x29\x19\x21\x25\xcc\x54\x27\x28\x5e\x79\x40\xd6\xf7\x91\x68\x6f\xbf\x8b\x8e\x09\x09\x8d\xcd\x58\xa8\x7a\x42\x80\x4d\x6c\xa2\xbe\xe7\x71\xd7\x63\xf9\x7d\x66\xd0\x40\xaf\xe9\xc6\xa6\x60\xd3\xd8\x40\x39\x07\xea\x18\xb5\x4d\x3d\x08\x55\x15\x05\xb6\x06\xee\x72\xce\x5f\x95\x5e\x0b\x4d\x08\xe7\x6b\x4c\x4d\xdf\x4f\xe0\x01\x8e\x22\x15\xd3\xcb\x40\x2a\xfa\x91\x02\xc7\xf3\x08\x0d\x53\xd6\x64\xd6\x54\x7c\xc7\x46\x84\x9e\xb7\xb3\xf7\xf8\x1b\x98\x86\x5d\xde\x38\x84\x1b\x11\x2e\xca\xfc\x2e\x38\x3b\xf9\xec\xf2\xee\xe2\xdb\xd9\xe2\xfc\xfb\xf9\xd5\xdd\xe2\xfa\xf4\xee\xa2\x70\xe0\x05\x08\x03\x20\xf7\xd7\xda\x75\xf7\x9d\x57\x1a\xcf\x4a\xe3\x80\x48\x03\xc8\x84\xff\x34\x92\x59\x79\xea\x7d\x99\x9f\x6a\x40\x55\x27\x42\x1c\x64\x66\xf3\xf9\xed\x71\x20\xf4\x26\x4e\x61\x36\x3f\xbd\xf9\x7a\x71\x2c\x92\xe0\xf3\x61\x39\xaf\xba\x86\xc9\x60\x25\x45\x48\xe0\x30\x02\xb6\x71\x80\x29\xc0\x2d\x2e\x2a\xd8\x3f\x98\x74\xf2\x21\xa6\x12\x36\x60\x92\x71\xa6\x80\xf9\x1a\x85\x41\x68\xc7\xca\x37\x4a\x3f\xad\xa4\xda\xb8\xb8\xc5\x5e\xc0\x9b\x04\x3a\x81\x37\x25\x76\xf1\x0a\x3f\x9a\xcf\x68\xa2\x00\x7e\xd0\x5f\x38\x08\xff\x89\xb3\xf2\x41\x39\x77\x9d\x3c\xe7\x3f\x1a\xc0\x95\x48\xb0\x28\x58\x63\xd5\x6a\x9f\x78\xe5\x1b\x5e\x6b\xa7\xf2\xdd\x6b\xc3\x72\x21\x57\x1a\x83\x96\xda\x01\xfe\xea\x52\x3e\xf9\x80\xbb\x84\x36\xf1\x4a\xf8\xa6\xb4\x58\x8d\xf9\x3f\x6a\x06\x8e\xab\xb7\x96\x22\x15\xaa\xa3\x83\xe9\xe1\x91\xdb\x2c\x30\xb3\x99\x54\x22\x60\x8d\xa3\x99\x20\x42\x73\xb2\x9e\xbe\xbb\xcc\x35\x7e\x61\xb5\xec\x96\x39\x8c\x4d\x64\x97\x8d\xa8\x76\x35\x7a\xdc\x68\xb5\xcb\xaf\xba\x63\x91\x09\x13\x79\x65\xa7\x83\xbe\x2a\x5f\x75\x7d\xb5\x63\xa9\x09\x9c\xc9\xdf\x00\x00\x00\xff\xff\xea\xf8\xdc\xbd\xac\x05\x00\x00"

func tmplReleaseYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplReleaseYamlTmpl,
		"tmpl/release.yaml.tmpl",
	)
}

func tmplReleaseYamlTmpl() (*asset, error) {
	bytes, err := tmplReleaseYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/release.yaml.tmpl", size: 1452, mode: os.FileMode(0644), modTime: time.Unix(1659449797, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xcf, 0x5b, 0x4d, 0x85, 0x39, 0x6d, 0x3d, 0x5a, 0x92, 0x45, 0x5c, 0x6c, 0xd6, 0x3e, 0x81, 0x3f, 0xfa, 0x67, 0xca, 0x65, 0xc1, 0xae, 0xba, 0x50, 0x77, 0x4e, 0x51, 0x4c, 0x82, 0x34, 0x6c}}
	return a, nil
}

var _tmplVarsargsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xc1\x4a\xc4\x30\x10\x86\xcf\x99\xa7\x18\x73\x4a\x16\x49\xee\xca\x1e\x8a\x77\x11\x84\x05\x4f\x32\xdb\xa6\x69\x74\x37\x53\xa6\xe9\x16\x29\x79\x20\x5f\xc3\x27\x93\xd6\x93\xb7\x9f\xef\x87\xef\xf3\x07\x78\xe2\xf1\x4b\x52\x1c\x0a\xfe\x7c\xe3\xba\xba\xb7\x40\x52\xeb\xb6\x9a\xb9\x0c\x2c\xb5\x02\x1c\x3c\x8c\xd4\x7e\x52\x0c\x78\xa5\x94\x01\xd2\x75\x64\x29\x68\x40\xe9\xfe\x42\x51\x03\x28\x5a\x50\xc7\x54\x86\xf9\xec\x5a\xbe\xfa\x2e\x50\x4e\xd3\x10\x3c\x2d\x91\x35\xa8\xf7\x7f\xef\x07\x0f\xec\x23\x77\x5c\x42\xbe\x79\x9a\x0b\x5f\x98\x3a\x0d\x16\xa0\x9f\x73\xbb\x57\x8c\xc5\x15\xd4\xa6\x77\x2f\x24\x53\x30\x76\xab\xdc\xf0\xe1\x88\xb4\xb8\xe7\xb0\x34\x12\x4f\x24\x93\xb1\x1b\x76\x27\x12\xa3\x7b\x12\x7d\x8f\xfa\x4c\xa2\xff\x68\x23\xd1\xec\x8a\x46\xe2\x64\xac\x73\xce\x82\x4a\x3d\x06\x91\x5d\x74\x73\xaf\x21\x77\xc6\x3e\xee\xe4\xee\x88\x39\x5d\xb6\xac\x1a\x29\xa7\xd6\x04\x11\x0b\xaa\x42\x85\xdf\x00\x00\x00\xff\xff\x93\xeb\x8a\x79\x2a\x01\x00\x00"

func tmplVarsargsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplVarsargsMainTmpl,
		"tmpl/varsArgs.main.tmpl",
	)
}

func tmplVarsargsMainTmpl() (*asset, error) {
	bytes, err := tmplVarsargsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/varsArgs.main.tmpl", size: 298, mode: os.FileMode(0644), modTime: time.Unix(1659396160, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xf5, 0x90, 0xc5, 0x63, 0x77, 0xf4, 0x58, 0xb9, 0x4d, 0xec, 0x7f, 0xc6, 0xfa, 0x8d, 0x60, 0xd3, 0x68, 0x3c, 0x73, 0x57, 0x9f, 0xc6, 0xa4, 0x6e, 0x5a, 0xcf, 0xa6, 0xb4, 0x3e, 0xbf, 0x64}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/ak.json.tmpl":         tmplAkJsonTmpl,
	"tmpl/cliitems.main.tmpl":   tmplCliitemsMainTmpl,
	"tmpl/cliitems.root.tmpl":   tmplCliitemsRootTmpl,
	"tmpl/cliitems.update.tmpl": tmplCliitemsUpdateTmpl,
	"tmpl/dotenv.tmpl":          tmplDotenvTmpl,
	"tmpl/info.plist.tmpl":      tmplInfoPlistTmpl,
	"tmpl/items.main.tmpl":      tmplItemsMainTmpl,
	"tmpl/release.yaml.tmpl":    tmplReleaseYamlTmpl,
	"tmpl/varsArgs.main.tmpl":   tmplVarsargsMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"ak.json.tmpl":         &bintree{tmplAkJsonTmpl, map[string]*bintree{}},
		"cliitems.main.tmpl":   &bintree{tmplCliitemsMainTmpl, map[string]*bintree{}},
		"cliitems.root.tmpl":   &bintree{tmplCliitemsRootTmpl, map[string]*bintree{}},
		"cliitems.update.tmpl": &bintree{tmplCliitemsUpdateTmpl, map[string]*bintree{}},
		"dotenv.tmpl":          &bintree{tmplDotenvTmpl, map[string]*bintree{}},
		"info.plist.tmpl":      &bintree{tmplInfoPlistTmpl, map[string]*bintree{}},
		"items.main.tmpl":      &bintree{tmplItemsMainTmpl, map[string]*bintree{}},
		"release.yaml.tmpl":    &bintree{tmplReleaseYamlTmpl, map[string]*bintree{}},
		"varsArgs.main.tmpl":   &bintree{tmplVarsargsMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
