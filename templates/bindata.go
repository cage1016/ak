// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/.gitignore.tmpl (3.857kB)
// tmpl/ak.json.tmpl (719B)
// tmpl/dotenv.tmpl (157B)
// tmpl/info.plist.tmpl (808B)
// tmpl/items.main.tmpl (1.518kB)
// tmpl/release.yml.tmpl (3.836kB)
// tmpl/scriptFilter.main.tmpl (162B)
// tmpl/scriptFilter.root.tmpl (1.498kB)
// tmpl/scriptFilter.update.tmpl (502B)
// tmpl/varsArgs.main.tmpl (297B)
// icons/update-available.png (3.856kB)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplGitignoreTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xeb\x6f\xe3\x46\x0e\xff\xae\xbf\x82\x07\x15\x48\xeb\xb3\xa4\x4d\xb6\xbb\xc9\x16\x38\x1c\xb2\x4e\xb6\xcd\x22\x69\x73\xf6\x3e\xbe\x1c\x10\x8c\x47\xb4\xc5\x78\x34\xd4\xce\x50\x76\xdc\xbf\xfe\x30\x7a\xf9\xd1\xec\x1d\x02\xdc\x37\x89\xc3\xe1\x6b\xc8\x1f\xc9\x18\x3e\x90\x41\xd0\x0e\x95\x60\x0e\xb5\x27\xbb\x84\x93\x74\x49\x42\x4b\xcb\x0e\xe1\x57\xb4\xe8\x94\xb0\x3b\x81\x05\x3b\xf8\x42\xbe\x56\x06\x66\x52\xe7\xc4\x30\xe1\x1c\x7f\x81\x42\xa4\xf2\xbf\x64\xd9\x9c\x24\x35\xdb\x6c\xed\x35\xe7\x98\x2c\x69\x19\xc5\x30\xe9\x04\xcf\xb7\x03\xdb\x66\xb3\x49\x85\x2b\x51\x26\xd5\x5c\x66\x39\xae\xd1\x70\x85\xce\x67\x83\xd6\x4c\x55\x94\xad\x1b\x55\xbe\xd1\x14\x24\x8e\x4b\xa5\xd9\x8f\x97\x6c\x94\xcd\xa3\x18\xae\x73\x12\x50\xf2\x12\xb9\xff\x14\x2c\x2b\xa3\x04\xfd\x3f\xfe\xbb\xf4\x28\x8e\x63\xf8\x95\x6f\x95\xcd\x21\x8e\xe3\xe0\x08\xaf\xd1\x79\xf8\x88\xf2\xde\x29\xb2\x1e\x6e\xae\xae\xfd\x2f\x70\x63\x05\x8d\xa1\x8f\x63\x98\xd6\xf3\xed\x1d\x59\x1c\xc3\x7d\x51\xcd\x84\x5d\x39\x86\xcb\xaa\x0a\x21\x1a\xc3\xfd\x76\x52\xa8\x40\x99\xdc\x12\xdb\x31\x5c\xda\xdc\x31\xe5\x5d\x1c\xc7\xf0\x15\xe7\xcd\x15\x08\x0a\xa7\x94\xa3\x8b\x62\x98\xe2\x02\x1d\x5a\xbd\x17\x62\x6a\xd5\x3d\x26\xbe\xae\x2a\x76\x92\x3e\xa2\xcc\x1b\x7b\x1a\x9f\x0b\x9d\xa1\x4d\x6a\x9f\x29\x27\xa4\x0d\xfa\xec\xec\xd5\xdb\x37\x3f\xff\x7c\xf1\xfa\x5d\x14\xc5\xf0\xd9\xa3\x4b\x7c\x85\x9a\x16\xa4\xc1\x4b\xbd\x58\x44\x29\xe5\xa8\xb2\xd1\x28\xdb\xb0\x5b\xf9\x4a\x69\x4c\x9f\x4a\xb3\x23\x8b\xf2\x2b\x7f\x48\xaa\xbd\x5a\x62\xea\x45\x09\x79\x21\x7d\x74\x9a\x93\x16\x62\xab\x1c\xa1\xdf\x51\x7d\x81\x66\x11\x6c\xb8\xfc\x3a\x3b\xb4\x63\xc7\xa3\x36\xad\xa8\x28\xee\xb3\x0e\x73\x58\x90\xd9\x97\xa3\xd9\x0a\x5a\xb9\xe3\x1c\x4d\xcf\x3c\x43\xeb\x49\x68\x8d\xc0\x0e\x0a\x5a\x16\x89\x2e\x6a\x67\x8f\xaf\xe6\x4a\xd4\x8c\x6b\xa7\xd1\x67\xcf\x52\x53\xca\x9f\x67\x4f\x0d\x6b\x65\x0e\xdd\xf4\xdf\xcc\xd5\x1e\xc7\x61\x08\xb6\x56\x95\xa4\x8f\xa2\x46\x57\xe8\x69\x69\xd1\x1d\x31\xcf\xad\x5a\xd3\x32\x94\xd8\xe0\xbd\x53\xb9\xc1\x1d\xcb\xb2\xf9\x3f\xbc\x66\x68\xee\xda\x18\x0f\x17\x9a\xe4\xb9\x53\x6b\xb4\xb0\x21\x29\x40\xd5\xc2\x09\x95\x21\x4f\xa2\x18\xbe\x16\x68\xbb\xfa\xee\xd8\xd9\x7d\x87\x7b\x0c\x5b\xae\xc1\x17\x5c\x9b\x1c\xf0\x49\x9b\x3a\x47\x28\x39\xaf\x0d\xb6\x41\x1d\x47\x31\x78\xb2\x1a\x41\x0a\xdc\xc2\x86\x8c\x81\x39\x82\xc3\x0e\x47\xc6\x8d\x29\xa5\xda\x82\x56\xb5\x47\x68\xde\x23\x05\xf8\x6c\x35\x97\x25\x5a\x01\x5a\xb4\xb6\x44\xf1\xbe\xe2\x34\x8a\xa1\xf5\x30\x24\xf0\x42\x69\xf1\x03\x45\x73\x59\x91\xe9\xa2\xd7\x13\x1f\x95\x9b\x62\xc5\x9e\x84\x43\x2c\x0e\xce\x5a\x83\x0f\x69\xa3\x94\xfe\xca\x11\xc5\xd0\xd3\x47\x29\x55\x2e\x44\x74\x72\xa7\x56\x18\xe9\x52\xad\x30\x99\xd7\x64\xf2\x64\x94\x05\xfa\x1d\xdb\x25\xc3\xf5\x53\x65\xd8\xa1\x83\xca\xd4\x4b\xb2\xbb\x57\x29\xc3\xf1\x0c\x45\xc8\x2e\x87\x64\x0e\x08\x9b\xcc\x95\xc7\x1c\x2a\xc7\x8f\xa8\x25\x40\x69\xa9\x24\x1a\xa5\xb4\x69\x1e\xb0\x87\x91\x88\x6b\x69\xf4\x94\x15\x1a\x61\x8b\x36\xf3\x73\x49\x82\xf8\x03\x5d\x0f\x9d\xe9\x0d\xef\xc7\x9b\xe9\x65\x7f\xaa\xc4\x28\xef\x49\xd9\x70\x27\x69\x89\xbd\x1d\x93\xda\xf9\x50\x25\x13\xc3\x8f\xb5\xc3\x43\xe3\x1d\x56\x26\x94\x34\x0e\x55\x15\x6a\xf8\x96\xac\x1c\xf2\xf9\x40\x36\x64\x5b\x33\x27\x4e\xf9\xc2\x6c\x03\x0a\x74\x6c\xf0\x63\x68\x13\x87\xf8\xd6\x64\x43\xef\xe2\x4f\x91\xe6\xf2\x41\xef\x2e\x3e\xe0\x53\x78\xfb\x07\x2f\x6e\x88\xda\xde\x71\x5a\xb9\x80\xe2\x12\x52\x7d\x8f\xdc\xbe\xca\xfe\xe1\x42\xcd\x1d\xe9\x7d\x4a\xd7\x24\xd8\x75\xd1\x9f\xa2\x17\x98\x18\x42\x2b\x9d\x37\x01\x57\xa7\xf8\xad\x46\x2f\x0d\x7b\x6f\x77\xdb\x17\xe0\x75\x7a\xfa\x77\xf0\xe8\x48\x19\xfa\x13\x73\xd0\x4a\x17\x6d\x09\x74\xf7\x1b\x82\xcf\x1a\x5b\x1e\x02\xfd\x41\x17\xa8\x57\xbe\x2e\x7d\xea\xd1\x1d\xf4\x91\x7b\x25\xba\x18\xba\x49\x5b\x06\x53\x54\x9e\xed\x0e\xdf\x97\x24\x45\x3d\x6f\xb0\xfc\x91\x71\x6e\x54\xbd\x6b\x5e\x29\x71\x46\xde\xd7\xe8\xb3\xd3\x8b\xb7\x71\xf3\xd9\x95\x53\x72\x76\xfa\xe6\xdd\xc5\xf9\xf9\xd9\x69\xb4\x97\xcc\xcf\x15\x40\x49\x5e\x77\x84\x21\xd7\x67\xfd\x93\xf6\x2f\x1d\x0f\xf6\xb4\x04\x7f\xd4\x66\x5a\x6a\x76\xfe\xee\xfc\x75\x32\xe4\xc3\x1e\x34\x1e\xa4\x48\x23\xfd\x5f\xf5\x1c\xe1\xfe\x65\xd2\xcf\x5e\x5f\xb4\xd2\xbf\xd5\x73\x4c\x82\xa7\xb5\x25\xd9\x26\xc7\x35\xd7\xf0\xdc\x34\x81\xe9\x73\xf7\x4e\xb9\x55\xce\x1b\x0b\xbf\xf7\xd0\xfa\x52\xd7\x2e\xde\xbd\x4d\xca\x4e\x4a\x32\x00\x74\x82\xb6\x50\x56\x63\xbe\x57\xf1\x7f\x61\x3a\xc4\xe9\xe7\x85\xfc\x2f\x9e\xb6\xb8\x86\x6c\x6b\xe7\x33\x62\x0b\xf3\x7a\xd9\x74\x3c\x1c\xfc\xd8\x72\x2d\x4e\xe9\xd5\x91\x23\x4d\x7a\x64\x1f\xdf\x4f\x93\xb3\xb3\x37\xe7\x9d\xae\x1f\x26\x97\x93\xdf\xae\x1f\x3e\xdc\xdc\x5e\xff\xd0\x68\xe0\x1c\x67\xe2\x50\x95\x2f\x8c\xcf\xe9\xd9\xd9\xab\xb7\x49\x98\x9b\x7c\x73\xbd\x2f\x87\x81\xd0\xbf\xc4\xe5\x9f\x01\x69\x3e\x31\x9b\x15\x35\xb0\x37\xe0\xc0\x0b\x35\x5e\xbc\x7a\xf3\x3a\x51\x41\x5a\x22\xad\xb4\x64\xc1\x2e\xe9\x07\xa2\xbd\x29\x22\xf0\x1c\x41\x70\x1c\x43\xa9\xf4\x1f\xb3\xae\xfa\xda\xe9\xc2\x44\xe9\xd5\xec\x21\x8c\x5d\x18\xa5\x97\x55\x65\xf0\x8a\xeb\x79\x28\xed\xdb\xd9\x1f\x6b\x74\x8e\x72\x6c\xb0\x59\xb3\x85\xb2\xf6\x02\x68\xf3\xb6\x57\xca\x86\xe1\xdf\x2e\x0a\x27\x51\x60\xf9\x54\xd4\xe5\xdc\x2a\x32\x3e\x4a\x1f\x46\x3d\xe6\x7b\x90\x42\x09\x94\xb4\x2c\x04\x54\x55\xa1\x72\x40\x36\xb4\x4c\x70\xcc\x02\xbc\x00\x05\x6b\x36\x75\x89\x51\x7a\xc5\xba\x0e\xa5\x3c\xc5\x35\x79\x62\xeb\x93\x2f\xa7\xaf\x5e\x45\xe9\xc2\xe3\x1a\xad\xf8\x3c\x4a\x67\x15\x8b\x09\xc2\xba\xa3\x4f\x18\x9a\xa6\x72\xdb\x1b\xc1\xd2\x47\xe9\xa7\x80\x8e\x61\xe2\xf9\xd2\xc8\x0c\xd6\xa5\xa4\xad\x8f\x42\x1c\x53\x15\x3c\x4c\x85\x4a\x2c\x95\x2e\xc8\x62\x9a\xb3\x65\xa9\x1c\xfa\x80\x87\x51\x0c\x57\xe4\x50\xb7\x8d\x14\x2a\x0e\x63\x16\x29\x63\xb6\xc3\x72\xc0\x16\x1c\x96\x2c\x08\x97\x1f\xee\xc1\x17\x6a\x17\xb8\xf7\xfd\x07\xfa\x95\x70\x15\xfd\x8e\x12\xe6\x49\x68\x4c\x82\x0f\x6c\xc2\x44\x3b\xd8\x0b\x9d\xc1\xaa\xca\xc9\xaf\xf6\xdf\x67\x1f\x23\x69\x62\xb8\xce\x61\x79\x34\x0a\x8e\x52\xd2\xe1\xa0\xbd\xd6\xee\x23\x6d\x9b\x09\xd9\xdc\xdc\x4d\xdb\x15\x24\x1b\x45\x7f\xeb\x3f\x7d\x9f\x10\x8f\x9e\xed\x8e\xdc\x4e\xb7\x87\x34\xa3\x6a\xab\x8b\x23\x22\x3e\x49\x98\x32\xd9\x1e\x73\x8f\xd2\x66\xdb\xf1\x96\xaa\x0a\xdb\x26\x72\x1b\xa6\x45\xf8\x8d\xbc\xb0\xdb\x7e\x67\x6b\x8a\xd2\xa2\x3d\x6f\x2a\xfd\x7d\x4d\x46\x9e\xe1\x82\xeb\x41\x6d\x34\x4a\xd7\x9e\x9e\xbe\xe3\xf5\x7e\xdc\x6e\xda\xc5\x4d\x19\x03\xcd\xdc\x0a\x9d\xa6\x90\x6f\xdd\x48\xdc\x51\xa2\x94\xd8\x76\x59\x7e\x6d\xf3\xc0\xf0\xff\x5d\xd2\x9a\xa1\xc3\x0b\x97\xe0\x42\x27\x82\x1f\x71\x8d\x6e\x2b\x45\x18\x42\x55\x9e\x87\xbd\x10\x0d\x6f\x60\xc3\xf6\x44\xc2\x04\xc9\x5d\xdd\xd9\xb0\x30\x9e\xf4\x5b\x00\xec\xed\xa3\xa1\xb0\x4e\xc2\xf8\x18\x46\xd4\x30\x5b\x9e\x7c\xae\x72\x25\x78\x02\x5c\x05\x84\xfc\x29\x8a\xd2\x90\x7a\x0b\xc3\x9b\x0c\x9f\x30\x12\xf4\x82\x76\x1d\xe9\x20\x3b\x2c\x2e\xf2\x24\x7b\x2c\x95\xc3\x85\x4f\x2b\x43\x5e\x1a\xd6\xff\x04\x00\x00\xff\xff\x20\xa3\x66\x88\x11\x0f\x00\x00"

func tmplGitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGitignoreTmpl,
		"tmpl/.gitignore.tmpl",
	)
}

func tmplGitignoreTmpl() (*asset, error) {
	bytes, err := tmplGitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/.gitignore.tmpl", size: 3857, mode: os.FileMode(0644), modTime: time.Unix(1691936843, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0xd6, 0xb9, 0x4b, 0x18, 0x9a, 0x72, 0x31, 0x4e, 0x5, 0x40, 0x3a, 0x61, 0xf0, 0xfe, 0x38, 0x71, 0x73, 0x63, 0x26, 0x83, 0x8b, 0xb3, 0x84, 0x43, 0x60, 0xae, 0x8f, 0xcf, 0xf8, 0x11, 0x30}}
	return a, nil
}

var _tmplAkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x8f\xa3\x30\x10\x85\xfb\xfc\x0a\x8b\x9a\x83\x5c\x4b\x77\xe5\x75\x5b\x64\x6b\xcb\xd8\x13\x18\x81\x3d\x96\x3d\x24\xa0\x55\xfe\xfb\x0a\x87\x6c\x80\x8d\x56\xdb\xfa\xbd\xf9\xde\xf8\x69\x3e\x0e\x42\x08\x91\x35\x24\x2d\x19\xe9\x95\xee\x54\x03\x59\x25\xb2\x06\xb9\x1d\xea\x42\x93\x2d\xc7\x71\x2c\x55\xf7\x87\x21\x72\x96\xdf\xfd\x57\x0a\xdd\xb9\xa7\x6b\x56\x89\x3b\x21\xbd\x9e\xa9\x37\x10\xe6\xe9\xe2\xcb\x90\x3f\x65\xa7\x6c\x42\xff\xeb\xc4\xe9\xc9\x4a\x92\x81\xa8\x03\x7a\x46\x72\xb3\x63\x2d\x69\xc5\xd0\x50\x98\xa4\x26\x6b\xc1\xf1\xac\x3f\xde\x2a\x71\x22\xea\x63\x2e\xfe\x3b\x86\xe0\x80\x73\xf1\x16\xc8\x0c\x9a\xf1\x82\x3c\xe5\xe2\xdd\x2d\x56\x8c\x60\x5e\x51\xf7\x69\xf5\xe0\x4c\x0f\x12\x4d\x8a\x21\x5b\x8c\xe3\x58\xa8\x8e\x77\xfb\xea\x00\x8a\xc1\xc8\xfa\x1b\xe0\x0a\xb5\x54\xc6\x04\x88\x71\x96\x5a\x66\x1f\xab\xb2\xfc\xb1\xce\x34\x78\x81\x10\x97\xef\x1f\x8b\xbf\xc5\x31\x4b\xd2\x6d\x29\x7c\xf0\x46\x31\x6c\xeb\xbe\x33\x65\x00\x4f\xbf\x88\xda\xe0\x7a\xd4\xe0\xe2\x8e\xc7\x93\x87\x75\xcb\x71\xf0\x9e\x02\x8b\xc5\x2c\x5e\x04\x38\x8c\xad\x72\xdc\xc6\xf2\x41\xcc\xb7\xbc\x99\x63\x71\xf3\xd1\x09\x54\xd8\xb7\xf6\x38\x8d\xed\x96\x4d\xaa\x63\xb5\xa1\xf2\xbe\x47\xad\xe6\x33\x91\x68\xc0\x31\xf2\xb4\x1a\x3b\xdc\x3e\x03\x00\x00\xff\xff\x65\x6f\xb7\xd4\xcf\x02\x00\x00"

func tmplAkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplAkJsonTmpl,
		"tmpl/ak.json.tmpl",
	)
}

func tmplAkJsonTmpl() (*asset, error) {
	bytes, err := tmplAkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/ak.json.tmpl", size: 719, mode: os.FileMode(0644), modTime: time.Unix(1668783398, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0xfd, 0xb9, 0x81, 0xc2, 0x2a, 0xa5, 0xd0, 0x86, 0x77, 0xae, 0xa3, 0xb8, 0xd2, 0xf2, 0xf5, 0xcc, 0xdf, 0x31, 0x83, 0x6e, 0x23, 0x37, 0xdf, 0xd7, 0x6f, 0x69, 0xe4, 0xd7, 0x2d, 0xfd, 0xf5}}
	return a, nil
}

var _tmplDotenvTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcc\x49\x2b\x4a\x4d\x89\x2f\xcf\x2f\xca\x4e\xcb\xc9\x2f\x8f\x4f\x2a\xcd\x4b\xc9\x49\xcd\x4c\xb1\x55\xaa\xae\xd6\x73\x02\x73\x3c\x5d\x6a\x6b\x95\xb8\xd0\x15\xa6\x24\x96\x24\xda\x2a\xe9\xe9\x97\xa4\x16\x97\xa4\xe6\x95\xe9\x83\xf8\x98\xaa\x92\x13\x93\x33\x52\x91\x95\x81\x05\x30\xd5\x95\xa5\x16\x15\x67\xe6\xe7\x81\x6d\x0d\x83\xb0\x6b\x6b\x95\x00\x01\x00\x00\xff\xff\x62\x86\xbb\xd0\x9d\x00\x00\x00"

func tmplDotenvTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDotenvTmpl,
		"tmpl/dotenv.tmpl",
	)
}

func tmplDotenvTmpl() (*asset, error) {
	bytes, err := tmplDotenvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dotenv.tmpl", size: 157, mode: os.FileMode(0644), modTime: time.Unix(1659356539, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xd1, 0x5a, 0xd0, 0xa5, 0x5a, 0xc4, 0x1, 0x23, 0xc1, 0xe6, 0xf8, 0x29, 0x47, 0xda, 0x4, 0x37, 0x5b, 0x8c, 0x17, 0xe9, 0x18, 0xf0, 0x6f, 0x95, 0xdf, 0x18, 0xbc, 0x32, 0x48, 0xfd, 0xff}}
	return a, nil
}

var _tmplInfoPlistTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x8f\x9b\x30\x10\xc5\xcf\xe1\x53\xb8\xbe\xc7\x4e\x6e\x55\xe5\x65\xb5\x09\x5b\x29\x52\xb4\x45\x2a\x69\xd5\xa3\xb1\x27\xd4\x2d\xd8\xc8\x36\xa5\x08\xf1\xdd\x2b\xfe\x6c\xb2\x69\xbc\x37\x3c\x6f\xde\x8f\x37\xa3\x61\x8f\x7f\xab\x12\xfd\x01\xeb\x94\xd1\x0f\x78\x4b\x36\x18\x81\x16\x46\x2a\x5d\x3c\xe0\x53\xf6\x79\xfd\x11\x3f\xc6\x11\xfb\x90\x7c\xd9\x67\x3f\xd2\x67\x54\x97\xca\x79\x94\x9e\x76\xc7\xc3\x1e\xe1\x35\xa5\x4f\x75\x5d\x02\xa5\x49\x96\xa0\xf4\x78\xf8\x9a\xa1\x2d\xd9\x50\xfa\xfc\x82\x11\xfe\xe9\x7d\xfd\x89\xd2\xb6\x6d\x09\x1f\xbb\x88\x30\xd5\xd8\xe8\x68\x6a\x4d\x0d\xd6\x77\x47\xe5\xfc\x7a\x4b\x36\x44\x7a\x89\xe3\x88\xcd\xf4\x9b\x38\x71\xc4\xa4\x12\x3e\x8e\x56\xec\x37\x74\x71\xde\x68\x59\x82\x92\x8c\x8e\xaf\x68\xc5\x9c\xb7\x4a\x17\x71\xdf\x93\xdd\x24\x1d\x92\x61\x60\x74\xa9\x46\xab\xbe\x57\x67\xa4\x01\x91\x3d\xf7\x50\x18\xdb\x21\x7c\xd2\x62\xfe\x56\x0e\x24\x1e\x86\x89\xbb\x94\xba\x00\xf7\xd5\xf9\x86\xdb\xf7\xa0\xe5\x30\x2c\x99\x84\xd1\x1a\x84\x57\x46\xbb\x8b\x7d\xcc\x4c\x5f\x43\x0b\x0b\xdc\x83\xcc\x83\xf4\x59\xdb\x75\x37\xb1\x27\x9b\x04\x27\xac\xaa\x47\x70\xc0\x98\x5c\xd5\x80\x55\x39\x9e\x97\x70\x5d\xd3\x99\x97\x0e\x2e\x81\x34\xaf\x20\x80\x7c\xe1\x15\xdc\xb3\x4c\xfe\x0b\x84\xbf\x8e\xc6\xad\xe5\xdd\x05\x65\x81\xcb\x7b\xd8\xff\x8c\x46\x49\xee\x79\x78\x3b\x8d\x03\x2b\x8c\x3e\xab\xa2\xb1\x7c\x1c\x67\x7e\xbc\xf3\xbf\xe5\x38\x02\xe9\xbf\xcd\xca\xfd\x00\x2d\xe4\x5c\x4a\x0b\xce\x05\x5c\xdf\x21\x7f\x9a\xc5\xb7\x46\x46\xe7\xa3\x63\x74\x3a\xc9\xf8\x5f\x00\x00\x00\xff\xff\x4a\x04\x16\x93\x28\x03\x00\x00"

func tmplInfoPlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplInfoPlistTmpl,
		"tmpl/info.plist.tmpl",
	)
}

func tmplInfoPlistTmpl() (*asset, error) {
	bytes, err := tmplInfoPlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/info.plist.tmpl", size: 808, mode: os.FileMode(0644), modTime: time.Unix(1684890603, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x89, 0x57, 0x6, 0x2b, 0x50, 0x65, 0x3c, 0x57, 0x6c, 0x6e, 0x67, 0x2a, 0xe6, 0x8c, 0xe1, 0x29, 0x2a, 0xe3, 0x91, 0x32, 0xe9, 0x17, 0xc3, 0xc0, 0xfc, 0xc8, 0x2c, 0x84, 0xc0, 0x7b, 0xb4}}
	return a, nil
}

var _tmplItemsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8e\xe3\x44\x10\x3e\xbb\x9f\xa2\xa6\x25\x46\xed\x21\x38\xcb\x35\x28\x87\x90\x65\xd8\x20\xb4\x42\x33\xcc\x22\x34\x8a\x56\x1d\xbb\xec\x34\xd3\xee\xb2\xfa\x67\xbc\x10\x59\xe2\x04\x67\x9e\x80\x13\x87\x7d\x0d\x1e\x65\x9f\x80\x47\x40\xdd\x4e\x66\xd7\x33\xb0\x97\xc4\x72\x7d\xfe\xea\xab\xef\xab\xee\xf9\x05\x5b\x53\xf7\xb3\x55\xcd\xde\xc3\xdf\x6f\xe1\x70\x28\x7e\x44\x69\x87\x21\x3e\xad\x82\xdf\x93\x1d\x06\x76\x31\x67\x9d\x2c\xef\x64\x83\xd0\x4a\x65\x18\x53\x6d\x47\xd6\x83\x60\x19\x47\x6b\xc9\x3a\xce\x32\xae\xa9\x89\x7f\xe4\xc6\xdf\x39\xbe\xc1\x92\x33\x96\xc9\x1e\x78\xa3\xfc\x3e\xec\x8a\x92\xda\x79\x85\xd2\x28\xb7\xc7\xb9\xec\x1b\x8a\xd0\xff\xab\xcd\x43\x57\x49\x8f\x9c\x65\xaf\x27\x04\x3f\xd1\x9e\xe6\x0d\x55\xe4\xd1\xdc\xcf\x65\xf0\xa4\x49\x56\x9c\xe5\x8c\x95\x64\x9c\x87\xf1\xbb\x6f\x68\xf7\x52\xb6\x08\x4b\xe0\xe5\x1e\xcb\xbb\x4b\xb2\x37\x47\x42\x76\x2f\x6d\x14\x6f\xb1\xa3\x58\x3f\x1c\x8a\xaf\x13\xff\x15\x76\x34\x0c\x9c\x65\x7d\x0d\x00\x17\xb2\x2f\x7e\x20\x7b\x57\x6b\xea\x23\x7b\x1d\x4c\x09\xca\x28\x2f\x72\x38\x24\xcc\x12\x64\x5f\xbc\xc4\x5e\x8c\x2d\x23\xcb\x8b\xb0\x13\x91\x37\x9f\xc5\xda\x0b\xd4\xdd\xcd\xd5\xb7\xe9\xcd\xa7\x7c\xae\x9c\x0b\xe8\x78\x9e\xb3\xe1\x48\x67\x83\x19\xd9\xa4\x6d\x1c\x2c\x96\xd0\xd7\xc5\xca\x36\x4e\xe4\x2c\x53\x35\x68\x34\x22\x56\x72\x58\x2e\xe1\x59\xc4\x65\x7d\x5d\x5c\x4a\x2f\xf5\x57\xd1\x78\x31\xda\x9f\x34\xf0\x4e\xa3\x74\x08\x9d\xa5\x7b\x55\x21\x38\x6a\x11\x94\xe9\x82\x87\x7f\xfe\xfc\xe3\xd7\xd8\x35\x1b\x18\xcb\xf6\xd2\x54\x1a\x6d\xea\xd6\xca\xee\xd6\x79\xab\x4c\xb3\x8d\x72\xc4\x87\x23\xcf\xe0\x76\x3b\xd6\xf2\xd8\x97\x1f\xe3\x58\x40\x42\xf6\x35\x4c\xc1\xaf\xdf\xc3\x93\xce\x28\x74\x4d\xa6\x56\x4d\xb0\x28\x64\x5f\x7c\x8f\x6f\x7c\x12\xed\x84\xb7\x01\xa3\x9c\x2c\xd3\xd4\x14\xdf\x59\x65\xbc\x36\x82\xaf\x63\x4e\xca\x34\x50\x93\x3d\xa6\xe8\x8a\xa2\xe0\x09\xa9\x6a\x40\x6b\x8f\x16\xad\x27\x89\x8a\xfc\x8b\x54\x3b\x5b\x82\x51\x7a\xec\xfe\xd4\xa7\xc4\x12\x0d\x48\xb5\x6b\x34\xd5\x25\x62\xb5\x93\xe5\x5d\x34\x3b\x1b\x66\xa3\x3d\xaa\x8e\x0d\x46\xe2\xd4\xe6\x79\x40\x91\xc3\xf9\x39\x9c\xf5\x75\xb1\x71\x57\xc1\x18\x65\x1a\x31\xd9\xb2\x71\xe4\xc9\x30\x47\xdc\x71\x0e\x48\x3b\x08\xca\x40\x6c\xd8\x58\x0a\xa6\x3a\x8d\x56\xb6\x55\x1c\x2b\x9e\x97\x62\x4d\x6d\x2b\x4d\x25\xc8\xa5\x35\xb8\x7d\xb6\x9d\xc1\xc9\xf9\x88\x9d\xb8\x70\x15\xcc\xc6\x7c\xf9\xc0\x37\x95\x34\x83\xb2\xad\xfe\xc3\x98\x07\x91\xb5\xe0\xc9\x1b\x70\x5e\x5a\xff\x58\xea\x02\x3e\x71\x7c\x06\x47\xdf\x86\xa7\xde\xac\xee\xa5\xd2\x72\xa7\x71\xdc\xdf\x27\x71\x5f\x87\xae\xb3\xe8\xdc\xcd\xe6\xf9\x07\x81\x4f\x2c\x1a\x89\x40\x9e\x98\xce\xd2\x88\x7d\x1d\xd7\x79\xe3\xb1\x15\x7c\x65\x4e\xa2\x94\x9b\xe0\x8a\x38\xca\x75\xd8\x79\xe5\x35\x0a\xfe\xee\xf7\xbf\x80\x2c\xbc\xfb\xed\x2d\x78\x02\x65\x9c\x97\x5a\xc3\xc9\xb7\x04\x7e\x25\xb5\xaa\x44\x2d\xb5\xc3\xf1\xc5\x2a\x78\x2a\xa9\xed\x34\x7a\x14\xbc\x3f\x2e\xf2\x62\xf2\xd1\xa6\x24\x23\xce\x65\x5f\xc4\x87\xc3\x2b\xa9\x03\x2e\x4e\x79\x7c\xf6\xa0\xa7\xe8\x4c\xc3\x87\xd3\xf1\x9a\x41\x1d\xd3\x88\x19\x9d\x8e\xda\xad\x1c\xb3\xdc\x26\x0b\xcf\xc6\xfa\xc7\x0f\x73\x39\x2e\x02\x18\xf2\x60\xb1\xa4\xc6\xa8\x5f\xb0\x7a\x74\x92\x45\x5f\xcf\x20\x71\x7f\xbe\xd8\xbe\xbf\x54\xe2\x25\x7d\xba\xa3\xe2\x92\x08\x1b\x4c\xac\xfe\x1b\x00\x00\xff\xff\xc4\x33\x2f\x75\xee\x05\x00\x00"

func tmplItemsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplItemsMainTmpl,
		"tmpl/items.main.tmpl",
	)
}

func tmplItemsMainTmpl() (*asset, error) {
	bytes, err := tmplItemsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/items.main.tmpl", size: 1518, mode: os.FileMode(0644), modTime: time.Unix(1691936571, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x6b, 0x6a, 0xa2, 0x79, 0xdf, 0x54, 0x30, 0x2f, 0xbd, 0xbe, 0x3c, 0x10, 0x4c, 0x77, 0x55, 0x9d, 0xc6, 0x4a, 0x4a, 0x15, 0x77, 0xe4, 0x7d, 0x49, 0x1d, 0x2, 0x4, 0xd2, 0xcd, 0xd0, 0x9}}
	return a, nil
}

var _tmplReleaseYmlTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\x50\x03\xb4\x05\x46\x79\x09\x82\xa2\x30\x9a\xa2\x8e\xa3\x26\xc6\xba\xd8\xb0\xd3\xf6\x21\xe8\x54\x5a\x3a\xcb\x6c\x69\x92\x25\x29\x3b\xad\xeb\xff\x7d\xa0\x7e\x59\xb2\xd5\x65\x0b\x8a\x3d\x0c\xd3\x93\x44\x7e\x77\xfc\x78\xf7\xdd\x89\x14\x74\x89\x3d\x98\x20\x47\x6a\xb0\x23\x45\xaf\x03\xa0\xf3\x2f\xf7\x0a\x60\xbf\x2a\x34\xf9\x2b\x00\x01\x95\xce\x38\x33\x0b\x8c\x3b\x9d\x4f\x72\x96\x4d\xcc\x52\xc6\xe3\x1c\x61\xac\xa6\x16\x93\xaf\x25\x7e\x49\xad\x66\x77\xe5\x17\x40\x22\xc9\x0a\xb5\x61\x52\xf4\xe0\xf6\xd8\x3f\xf9\xd5\xbf\xfb\x50\x4d\x2a\x4e\xed\x5c\xea\x65\x0f\x6e\x97\x34\x1a\x4d\x09\xa7\x16\x8d\xcd\x01\x3a\x15\x86\x38\xb3\xcd\xe6\xe3\xd1\x66\x53\x78\xf6\x4b\x1b\xd8\x6e\x3f\x6e\xb7\x05\x07\x54\x35\xc2\xa9\x41\xd3\x03\x1a\x59\x26\x85\xe9\x46\x0b\x8c\x3e\xcb\xd4\xbe\x5a\x9d\x54\x88\x3c\x04\x43\x61\x2c\xe5\x1c\x2e\x65\x45\x88\xcd\x7b\x60\xd2\x28\x42\x63\x9e\x3c\xad\x46\x9b\x0e\x0d\xda\x54\x91\x44\xee\x1c\x02\xac\x99\x5d\xec\xf6\xdc\xdc\x75\x93\xfe\x6e\xa6\xb6\x81\x1d\xa7\x49\x2a\x20\x15\xcc\x82\x8b\x83\xa9\x3c\xea\x54\xf4\x20\x91\xd9\x28\x90\x15\xf8\x5d\xdf\xf7\xf7\x4c\xc7\x54\x1b\x84\x60\x85\xc2\x36\xed\xbe\xd7\x88\x61\xb4\x90\xe0\x59\x9a\x9c\x1d\x3d\xf9\xf4\x05\x88\x86\xc7\x7e\x91\x7c\xdf\xd2\x24\x74\xae\x1e\x83\x77\xb4\xb9\x1c\xde\x5c\xbd\x3d\x0f\x83\x77\xc1\xf5\x4d\x38\xee\xdf\x5c\x6d\x3d\xf8\x0e\x06\x63\x30\xdd\x3f\x56\xdd\xee\x53\x0f\x5e\xbe\x84\xa3\x12\x76\xfd\x6e\xb3\x61\x73\xc0\x2f\xe0\x07\x82\xce\x38\xc6\x03\x19\xe3\x94\x25\x02\xe6\x94\x1b\x3c\xd8\xe8\xb9\x93\x10\x50\x11\x83\xa2\xd1\xe7\x1f\x13\x7e\x94\x8b\x2d\x43\xd1\x04\x6b\x33\x97\xa3\xd1\xf4\x2c\xa6\x7a\xcd\x04\x5c\x8e\xfa\x93\xc1\xd5\x19\x5d\xc6\xcf\x4e\x5d\x9c\x72\x1b\xc2\xe3\x39\xa7\x89\x01\x8f\x18\x20\x6b\x0f\x88\x04\xbc\xc3\x30\x83\xdd\xe3\x49\x2f\xff\x96\x27\x07\xab\x79\xe2\x4c\x49\x20\x91\x46\x6a\x11\x88\x4c\xad\x4a\x2d\xf8\x6b\xa9\x3f\xcf\xb9\x5c\x77\xf1\x0e\x77\x04\x5a\x1d\xe8\x25\xb4\x52\xac\xc6\x33\x7c\x23\x3e\x8d\xf8\x01\x44\xf1\x6e\xc1\xda\xb0\xe2\xa9\x65\x1c\x88\x46\xc5\x69\x84\x50\x8a\x90\x18\xab\x99\x48\xc0\x2b\x64\x8a\x62\xe5\x84\x90\x8b\xd3\x03\x26\xe6\xd2\x57\x9c\x19\x5b\xf3\xf5\x8d\x29\xa7\x1c\xdf\xef\x7a\x9b\x8d\xff\xbe\x58\xec\x9a\x2e\x71\xbb\x25\x6d\x7e\x7c\xca\xe7\x1a\xe3\x92\x96\x07\xfe\x1e\x61\xbf\x73\xa0\x51\xaa\x2d\x9b\xd3\xc8\x9e\x1d\x3d\xc9\x07\x1e\xb6\x54\x8b\x4e\xb1\x4d\x8f\xc3\xa5\x92\xda\x82\x53\x2d\x71\xb2\x75\x31\x19\xa0\xe3\xc0\x22\xd7\x94\xf6\x9a\x41\x5f\x29\x8e\xa4\x5f\xb4\x04\x96\x19\x93\x48\xc6\x68\x58\x22\x48\x84\xda\x9a\x57\xab\xe3\x1f\xf6\x87\x47\x70\xb3\x40\x88\x6a\xfe\x81\x09\xa0\x30\xfe\x6d\x30\x3d\x3e\x81\x39\xe3\x08\x28\x9c\xbf\x18\xa8\x01\x0a\x33\x6a\xf0\xd9\x29\xe4\xc9\xaa\xa7\xf5\xf8\x84\x38\x34\xc9\x01\xbd\x2a\x8f\x06\x23\x8d\xd6\xf8\xfd\xf1\xf8\x4d\x10\x5e\x04\xef\x82\x37\xa3\x71\x30\x09\x07\xc1\xe4\x66\xf8\x7a\x38\xe8\xdf\x04\xe1\xf8\xf8\x24\x3c\xef\x4f\x83\x67\xa7\x45\xba\x0f\x18\x2a\x6a\xcc\x5a\xea\xd8\xed\x3a\x06\x2b\x21\xdf\x29\xd8\x05\xd6\xb9\xfa\x7b\x8c\x4a\xb3\x7f\x48\xa7\x3f\x9d\xbe\x1f\x4d\x2e\x9a\x64\xf6\xbb\x75\x22\x05\xac\x18\x85\x2b\xb9\xc4\x73\x8d\x6b\x98\x4b\x0d\x2e\x52\x60\x8a\xb4\xb9\xa6\x42\x95\x02\x21\x2d\xd5\xec\x1b\x75\x39\xfa\x71\x83\x99\x39\x1f\x96\x2a\x58\x32\x1b\x2d\x90\xf3\x45\x37\xa9\xe1\x0b\x00\x2b\x56\x6f\x80\x6a\xc0\xff\xdb\xda\x4f\x68\x6b\xcd\x50\x56\x39\xcd\xc2\x59\x24\x73\x17\x29\x14\xab\x7a\x45\xf5\x07\xe1\xdb\x69\x30\xb9\xee\xff\x1e\xb4\xa8\x6e\x37\x79\xa8\xf4\xfe\xa0\x52\x5e\xab\x65\xbb\x2c\x5b\x73\xea\xb4\x59\xd1\xae\xb7\x38\x6a\xe1\xc5\x8b\x60\xf4\xda\xf5\xa2\x44\x0a\xff\x93\x69\x48\x6c\x53\x7b\x77\x8f\x67\x64\xaa\x23\xf4\xa0\x07\xb7\x5e\x23\xce\xde\x87\x5f\xf6\xb1\xb3\x54\xc4\x1c\x43\x16\x3b\xb8\xeb\x92\xe7\xd9\xc0\xf0\x62\xbb\xf5\x0e\xc0\x8e\x98\x07\xbd\xfd\x05\xb3\x39\xaa\x14\x77\xcd\x88\x49\x11\xb2\x18\x85\x65\xf6\x6b\xe9\xb3\xbf\x9b\x1b\x16\x53\xcd\x28\xba\x67\xdb\x69\x7f\x0f\x46\xaf\x1b\x67\x23\x01\x84\xcb\x84\x70\x5c\x21\x3f\x8b\x71\x96\x26\xf9\x80\x8b\x0a\xf8\xdd\x2a\x40\x07\xbf\x39\x68\x36\xf7\xff\xd4\x5f\xef\x51\xb6\x40\xd3\xc4\xf5\xfe\x6c\x54\x47\x0b\xb6\xc2\xac\xd5\x1d\x14\x42\xc5\xec\x61\xb4\xfc\x6f\x4c\x79\x0f\xfd\xbb\x76\x0e\xe4\xdf\x42\xaf\xa1\xfe\x72\xfe\xde\x12\x28\x81\x5e\x0f\x6e\x5b\xe5\xaa\xa8\x5d\x78\x65\xc5\x8e\xdf\x5f\x38\x7e\xdd\x87\x87\x60\xbf\x54\xa0\x59\x5b\xf7\x96\x56\x86\x37\x96\x2a\xee\x28\x67\x87\xde\xfd\xf2\xf8\xf0\x73\xea\xa3\x19\xc2\x7f\xf3\xe0\x24\xe2\xda\xb9\x29\x3f\x08\x99\x85\x4c\xe4\xf3\x93\xe3\xd3\xe7\xdd\xe2\x82\x44\x52\xc5\x25\x8d\x49\x71\xad\x20\xd4\x18\xb4\x7f\x75\x18\xca\xf1\x61\xaa\x79\x75\x59\x4a\x98\x5d\xa4\x33\x1f\xdd\x65\xa6\xba\x9f\xec\x70\x8d\xab\x93\x7b\xb2\x35\x42\xa7\x88\x5e\xa3\xa6\xcb\x58\x94\xbd\xfb\xcf\x00\x00\x00\xff\xff\xa4\x62\x73\xa5\xfc\x0e\x00\x00"

func tmplReleaseYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplReleaseYmlTmpl,
		"tmpl/release.yml.tmpl",
	)
}

func tmplReleaseYmlTmpl() (*asset, error) {
	bytes, err := tmplReleaseYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/release.yml.tmpl", size: 3836, mode: os.FileMode(0644), modTime: time.Unix(1691079123, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xa0, 0x47, 0x67, 0x15, 0x0, 0xac, 0xa, 0xa6, 0x70, 0x17, 0x5b, 0xa5, 0x1a, 0x8c, 0x7a, 0x7, 0x50, 0x7d, 0xe0, 0x87, 0x0, 0x7e, 0x8e, 0x6f, 0x7c, 0x78, 0x81, 0x5b, 0xa0, 0xef, 0x35}}
	return a, nil
}

var _tmplScriptfilterMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x31\x0e\x02\x21\x10\x00\xc0\xfa\xf6\x15\x84\xea\xee\x0a\x78\x83\x31\xc6\xca\xc4\xd6\xca\x20\x20\xa0\x72\x4b\xc8\x62\x34\x64\x1f\xe4\x37\x7c\x99\x51\xbb\xa9\x46\xcf\xb0\xc6\xf2\xac\x29\x44\x12\xef\x97\xe8\x5d\x1d\xbc\xa9\xcc\x5f\xad\x1a\x45\xac\xcc\x30\x6b\x28\xc6\x5e\x4d\xf0\x22\x9b\xb4\x00\xa4\x5c\xb0\x92\x18\x61\x38\x0a\x19\x12\xc5\x76\x52\x16\xb3\xbe\x60\x44\x1d\xd0\x21\xf9\xe5\xae\x4d\x23\xbc\xa1\x71\x12\x60\x90\xbd\xab\x2d\xee\xd0\xed\xff\x11\xb3\xb6\xd9\x49\x98\x00\xce\x6d\xb1\xbf\x77\x9c\x44\x87\xc1\x66\xa7\x36\x0f\x6f\x1b\xf9\x71\x02\xfe\x04\x00\x00\xff\xff\x8e\x52\x7f\x95\xa2\x00\x00\x00"

func tmplScriptfilterMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScriptfilterMainTmpl,
		"tmpl/scriptFilter.main.tmpl",
	)
}

func tmplScriptfilterMainTmpl() (*asset, error) {
	bytes, err := tmplScriptfilterMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scriptFilter.main.tmpl", size: 162, mode: os.FileMode(0644), modTime: time.Unix(1659395971, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xf6, 0x3a, 0xee, 0xc7, 0xe, 0x2d, 0x59, 0x9e, 0xe8, 0xb5, 0xcd, 0x3d, 0xf1, 0x82, 0xef, 0x94, 0x9e, 0x81, 0xaa, 0x5d, 0x85, 0xf2, 0xbd, 0xc1, 0xc4, 0xbe, 0xea, 0x1c, 0xbd, 0xa2, 0xdb}}
	return a, nil
}

var _tmplScriptfilterRootTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6e\xe4\x36\x13\x5d\x8b\xa7\x28\x13\xf8\x0c\xca\x5f\x87\xca\x20\xbb\x0e\xbc\x70\xda\x9e\x4c\x07\xc1\x20\x68\xc7\x13\x04\x83\x59\x50\x54\x49\x22\x4c\x91\x02\x7f\x46\x6e\x34\xb4\x4d\x4e\x92\xc5\x5c\x23\x47\x99\x93\x04\xd4\x8f\x27\xed\x20\x59\x48\x10\x58\xc5\xaa\x57\xef\xbd\x52\x71\x45\x76\xb6\x3f\x3a\xd5\xb4\x01\xfe\xfc\x04\xa7\x13\xff\x15\x85\x1b\xc7\xf4\x75\x13\x43\x6b\xdd\x38\x92\xab\x82\xf4\x42\x3e\x8a\x06\x41\x76\x15\x21\xaa\xeb\xad\x0b\xc0\x48\x46\xb5\x6d\x28\xc9\xa8\xf5\xf3\xbb\xc0\x27\x94\x94\x90\x4c\x0c\x40\x1b\x15\xda\x58\x72\x69\xbb\xa2\x42\x61\x94\x6f\xb1\x10\x43\x63\x53\xea\xbf\xc5\x8a\xd8\x57\x22\xe0\x8b\x14\xdf\xd7\xaf\xbe\x29\xa4\x2d\x9d\xa0\x24\x27\x44\x5a\xe3\x03\xcc\xa9\x3f\xd8\xf2\xad\xe8\x10\xae\x81\xca\x16\xe5\xe3\x6b\xeb\x1e\x96\x1a\xe4\xa3\x70\x09\xa5\xc3\xde\xa6\xf8\xe9\xc4\xbf\x9f\x8a\x1e\xb0\xb7\xe3\x48\x49\x36\xd4\x00\x70\x25\x06\xfe\x8b\x75\x8f\xb5\xb6\x43\xaa\x5e\x47\x23\x61\x77\x56\x8b\xe5\x70\x22\x99\xaa\x61\xa8\xf9\x7c\x32\xc5\x6f\x63\x8a\x5c\x5e\xc2\xc5\x50\xf3\xbd\x3f\x44\x63\x94\x69\xd8\x19\xb0\xe9\x66\xa6\x6d\xc3\x7f\x72\xca\x04\x6d\x18\x5d\xf2\x96\x01\x60\x82\x0d\xca\x40\x29\xe4\x63\xe3\x6c\x34\x15\xe7\x9c\xe6\x24\xcb\x64\x57\xc1\xf6\x1a\x12\xab\x7c\x67\xbb\x4e\x98\x8a\x59\xcf\x6f\x5c\xe3\xdf\x7f\xfd\x61\x03\x74\xa1\x2b\xe5\xaa\x1a\xd0\xb9\x94\x3e\xd4\xfc\x10\xcd\xde\x7c\xf7\x5c\xef\x1c\xd2\x26\xc9\x98\x7f\x3b\xa5\x5f\x5c\x83\x51\x7a\xc2\xf8\x05\x64\xcd\xe8\x9d\x73\xd6\x81\x0f\xc2\x85\x97\x50\xb7\xf0\x3f\x4f\x37\xe9\x76\x6a\x3b\x92\x6c\x24\xe7\xdc\xdc\x7c\x14\x4a\x8b\x52\x2f\xb4\x65\x43\xcd\x77\xd6\xd4\xaa\x89\x0e\x99\x18\xf8\x7d\xec\x7b\x87\xde\x3f\xec\x6f\x3d\x0b\x2e\x62\x9e\xcf\x59\x6f\x71\xd8\x07\xec\x18\xbd\x31\x6b\x47\xe5\x41\xac\xe5\x2e\x68\xce\x13\xce\xfb\x58\x06\x15\x34\x32\xfa\xf9\xf7\x3f\xc0\x3a\xf8\xfc\xdb\x27\x08\x16\x94\xf1\x41\x68\x0d\x2b\x29\x53\xf2\x3b\xa1\x55\xc5\x6a\xa1\x3d\xce\x07\x37\x31\x58\x69\xbb\x5e\x63\x40\x46\x87\x45\xf8\xed\xd9\xa5\xbd\xb4\x86\x5d\x8a\x81\xa7\x8f\xd3\x3b\xa1\x23\x6e\x57\xb2\xbf\x7a\xc6\xc3\x7b\xd3\xd0\x31\x4f\x04\x8c\x84\x14\x05\x38\x6b\xc3\xae\xab\xc0\x61\x9a\x0f\x4d\xf0\x10\x5a\x84\x52\x78\x04\x39\xcb\x07\x43\x8b\x06\xa4\xd0\x1a\x2b\x18\x54\x68\x6d\x0c\x20\xcc\x11\x7c\x2c\x97\x14\x3f\xf9\x76\xad\x75\x0d\x97\x93\xf1\x57\xfd\x4f\x24\x7b\xf0\xb8\x05\x98\xfc\x9c\xe4\x1c\x47\xba\x21\xd9\x7d\x6b\x5d\xd8\x4e\x87\xb7\xe8\xa5\x53\x7d\x50\xd6\xcc\xb1\x43\x34\x5b\x48\xb6\x66\xc9\x50\x57\x67\xf5\x36\x20\x5c\xe3\xe1\xfd\x07\x1f\x9c\x32\xcd\xac\xd8\x4b\xf7\xcf\xf2\xdc\xa3\xa9\x5e\x23\x56\xc9\xa7\xe9\x6c\xdc\x2c\x73\xdf\x3d\xa1\x8c\x01\x41\x54\x95\x87\xa4\x80\x6c\x95\xae\xd6\x91\x7d\xd2\x26\xf1\x90\x46\x7a\xe6\x21\x3d\x1e\x83\x87\x5a\x8b\xc6\x83\xe8\x7b\x67\x7b\xa7\x44\x40\x7d\xe4\xa9\xe8\xcf\xad\xf2\x49\xfe\x85\xab\xf2\x08\x9d\x50\x86\xa7\x17\xcb\x39\xec\x03\x58\xa3\x8f\x60\x10\xe7\x0e\xad\xe8\x7b\x34\x60\x8d\xc4\xbf\x37\xdc\x75\x15\x9f\x57\x7a\x41\x39\x9b\x72\xde\x11\x36\x91\x32\xcf\xfc\x65\x7f\xd6\x6b\xcf\x17\xfe\x63\x55\xb4\x61\xcb\x22\x64\xd6\xf3\xbb\x27\x15\xd8\xab\x75\x2d\xf2\x44\xcf\xd4\x5a\x19\x15\xd6\xbe\x70\x0d\x62\x48\x56\x5f\x96\x32\xfd\x93\xde\xc4\x92\xa5\xbf\x54\xbe\x49\xb1\x37\xa8\xfb\x87\xc3\x8f\xd3\xc9\xff\x69\xa1\xbc\x8f\xe8\x69\x5a\x92\xa1\x9e\x76\x9f\xe5\x50\x14\xd0\x89\x46\x49\xa8\xad\x83\x7f\xb8\x98\x8c\x7f\x05\x00\x00\xff\xff\x96\x36\x91\xb6\xda\x05\x00\x00"

func tmplScriptfilterRootTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScriptfilterRootTmpl,
		"tmpl/scriptFilter.root.tmpl",
	)
}

func tmplScriptfilterRootTmpl() (*asset, error) {
	bytes, err := tmplScriptfilterRootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scriptFilter.root.tmpl", size: 1498, mode: os.FileMode(0644), modTime: time.Unix(1691936560, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x3f, 0x9c, 0x3e, 0xd8, 0xe0, 0x8c, 0xdf, 0x6a, 0x26, 0x2c, 0xcf, 0xee, 0x83, 0x41, 0xa4, 0x73, 0xe5, 0xed, 0xde, 0xbf, 0xab, 0x47, 0x63, 0xcb, 0xa, 0xeb, 0xe7, 0xfa, 0xe1, 0x8, 0xec}}
	return a, nil
}

var _tmplScriptfilterUpdateTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x8a\xd5\x30\x14\x86\xd7\x39\x4f\x71\xcc\x42\xd2\xcb\x25\x45\xdc\x5d\xb9\x8b\xa1\x38\x4b\x11\x75\x16\x22\x2e\x32\xcd\x69\x1a\xa6\x49\xca\x49\xea\x55\x4a\x1e\xc8\xd7\xf0\xc9\xa4\xbd\xa3\xdc\xd9\x05\xbe\x9f\xef\xff\x4f\xda\x03\x74\x69\xfe\xc5\xde\x8d\x05\xff\xfc\xc6\x75\xd5\x5f\xc9\x70\xad\xdb\xeb\x6e\x29\x63\xe2\x5a\xe1\xd0\xc2\x6c\xfa\x27\xe3\x08\xfb\x60\x01\x7c\x98\x13\x17\x54\x20\xe4\x94\x9c\x04\x10\xe6\x82\xd2\xf9\x32\x2e\x8f\xba\x4f\xa1\xb5\x64\xa2\xcf\x23\xb5\xe6\xe2\x92\x04\x71\xcb\xf2\x3c\xbc\x79\xdb\xf6\xe9\x91\x8d\x84\x06\xa0\x6d\x71\x99\xad\x29\xd4\x05\x8b\x4c\x33\x53\xa6\x58\x32\x96\x91\x9e\x01\xf6\x29\x04\x13\x2d\xfc\x30\x7c\x93\x3d\xe3\xeb\xdd\xa2\xbb\x2b\x5e\x41\x3c\x64\x3a\x21\xa2\xbc\x86\xe4\x11\xc4\xe7\x31\x71\x39\xa1\x7c\xb8\x9a\xd6\x55\x7f\x30\x81\x6a\xdd\xd8\xa7\x25\x9e\x70\x58\x62\xaf\xfa\x60\xf1\xf0\x42\x76\x44\xc3\x2e\xe3\xb7\xef\xb9\xb0\x8f\xae\xc1\x15\x84\xb8\x0c\xba\x4b\x71\xf0\x6e\x61\x52\xe6\xa2\xbf\xd0\xcf\xf2\x9e\x39\x71\x56\x85\x17\x6a\x1a\x10\x62\x4a\x4e\x7f\x64\x1f\xcb\x14\x95\xec\x46\xea\x9f\x7c\x74\x38\xa4\x7f\xcb\xb3\xd6\x5a\x6e\x41\x3f\x20\x31\xe3\xe9\x8c\x9b\x76\x0b\xde\x27\xbe\xce\x54\xcd\xbb\x9d\xbd\x3a\x63\xf4\xd3\x5e\xbd\x75\xdf\x9b\x62\xa6\xbd\x4f\x11\xf3\xe6\xa8\x20\xea\x11\x2a\xc0\x76\x05\xfa\xe8\x8b\xda\x97\x72\x4a\xa5\x0b\x56\xdf\x59\xfb\x7c\x8f\xfa\xff\x6f\x0d\xd4\xbf\x01\x00\x00\xff\xff\x87\x89\x78\xab\xf6\x01\x00\x00"

func tmplScriptfilterUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScriptfilterUpdateTmpl,
		"tmpl/scriptFilter.update.tmpl",
	)
}

func tmplScriptfilterUpdateTmpl() (*asset, error) {
	bytes, err := tmplScriptfilterUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scriptFilter.update.tmpl", size: 502, mode: os.FileMode(0644), modTime: time.Unix(1691936563, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x3a, 0x70, 0x28, 0xd6, 0x2a, 0xc9, 0x5b, 0x9b, 0xaf, 0x77, 0xda, 0x35, 0x4e, 0xd8, 0xe7, 0xac, 0x82, 0x45, 0xe, 0xf8, 0xbf, 0x1a, 0x31, 0xbe, 0xf4, 0xbd, 0x5, 0x48, 0xb0, 0x70, 0x69}}
	return a, nil
}

var _tmplVarsargsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xc1\x4a\xc4\x30\x10\x86\xcf\x99\xa7\x18\x73\x4a\x16\x49\xee\xca\x1e\x8a\x77\x11\x84\x05\x4f\x32\xdb\xa6\x69\x74\x37\x53\xa6\xe9\x16\x29\x79\x20\x5f\xc3\x27\x93\xd6\x93\xb7\x9f\xef\x87\xef\xf3\x07\x78\xe2\xf1\x4b\x52\x1c\x0a\xfe\x7c\xe3\xba\xba\xb7\x40\x52\xeb\xb6\x9a\xb9\x0c\x2c\xb5\xc2\xc1\xc3\x48\xed\x27\xc5\x80\x57\x4a\x19\x20\x5d\x47\x96\x82\x06\x94\xee\x2f\x14\x35\x80\xa2\x05\x75\x4c\x65\x98\xcf\xae\xe5\xab\xef\x02\xe5\x34\x0d\xc1\xd3\x12\x59\x83\x7a\xff\xf7\x7e\xf0\xc0\x3e\x72\xc7\x25\xe4\x9b\xa7\xb9\xf0\x85\xa9\xd3\x60\x01\xfa\x39\xb7\x7b\xc5\x58\x5c\x41\x6d\x7a\xf7\x42\x32\x05\x63\xb7\xca\x0d\x1f\x8e\x48\x8b\x7b\x0e\x4b\x23\xf1\x44\x32\x19\xbb\x61\x77\x22\x31\xba\x27\xd1\xf7\xa8\xcf\x24\xfa\x8f\x36\x12\xcd\xae\x68\x24\x4e\xc6\x3a\xe7\x2c\xa8\xd4\x63\x10\xd9\x45\x37\xf7\x1a\x72\x67\xec\xe3\x4e\xee\x8e\x98\xd3\x65\xcb\xaa\x91\x72\x6a\x4d\x10\xb1\xa0\x2a\x54\xf8\x0d\x00\x00\xff\xff\x18\xb1\xf5\x48\x29\x01\x00\x00"

func tmplVarsargsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplVarsargsMainTmpl,
		"tmpl/varsArgs.main.tmpl",
	)
}

func tmplVarsargsMainTmpl() (*asset, error) {
	bytes, err := tmplVarsargsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/varsArgs.main.tmpl", size: 297, mode: os.FileMode(0644), modTime: time.Unix(1691936583, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x4, 0xe0, 0xe4, 0x85, 0xa5, 0xb5, 0x80, 0x53, 0xdd, 0x29, 0xea, 0xb5, 0x67, 0xfd, 0x32, 0x4c, 0x95, 0xc5, 0x21, 0xe4, 0x9c, 0x23, 0xca, 0xb5, 0x87, 0x50, 0x60, 0x6a, 0x57, 0xa4, 0x8a}}
	return a, nil
}

var _iconsUpdateAvailablePng = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xfb\x37\xd4\xdb\xff\xc7\xf7\xcc\x18\x83\x61\x22\x8c\x72\x57\xc6\x2d\x85\xca\x25\x84\x62\x64\x88\x18\x77\x91\x39\x0e\xc2\xa8\x86\x22\x21\xde\x73\x3a\xa7\x8c\x4b\xe4\x32\xba\x4c\x74\x8a\x18\x2a\xb7\x8e\x46\x29\xef\x32\xdd\xa6\x50\x28\xe4\xf6\x36\x8a\x13\x62\xe8\xc4\x48\xf8\x2e\xbe\x7f\xc2\x67\xad\xbd\xd7\xda\xeb\xb5\xd6\x7e\x3e\x9f\x8f\xe7\x5a\xfb\x87\xcd\xf2\xf4\x38\x20\x27\xa3\x2a\x03\x00\x90\xa3\xb8\x38\x51\x01\x40\x81\xb5\x2d\x25\x09\x00\x08\x8e\xaf\x8c\x04\x80\xd0\x43\x71\xda\xe7\x93\xc4\xf9\x36\x98\x52\x1b\x12\x71\xf6\xc5\xec\x4c\x1f\x45\x5b\xf7\x86\x59\x79\xbc\x42\xde\x3b\xc9\x6c\xa5\x71\x6d\x95\x73\x12\xe7\xac\x2e\xf9\x54\x6a\x6b\x87\xd9\x24\xc4\x34\x19\x1c\xbc\x1e\xf6\xa6\xdb\xcb\xd3\xcf\x61\x7b\xc0\xf3\x18\x13\x99\x2d\x41\xca\x77\xf7\x2b\x5b\xc7\x47\xd7\x59\x64\x76\xdf\x34\x65\xa2\x1b\xa1\x00\xac\x82\xcd\xf6\x78\xbc\x3c\x53\x77\x79\xf4\xb4\xc5\xb4\x7a\x7b\x44\xe8\xc7\xa0\x99\x87\xa9\xf6\xbb\x52\x5c\x12\xf3\x1f\x97\xec\xe1\x2c\xec\x49\x69\x99\x0c\x99\x41\x53\xf2\x75\xff\x87\x75\x35\x36\xb6\xf5\xcb\x28\x77\x57\xa5\x55\x3f\xb0\x41\xd9\x60\x5a\xec\x66\x97\x16\xf7\xae\x5e\xdf\x70\x0a\xaa\x80\x2a\xf4\x57\x96\x0c\x44\x52\x22\x53\x91\x36\xc3\x5e\xe4\xf9\xba\xc9\x37\xbf\x89\x8b\x89\x0a\xef\x47\xa7\x1c\x4a\x9e\x72\x96\xfd\x39\x3e\x7e\x2a\x5b\x9f\xb5\x85\x87\xe3\xd1\x85\xb3\x18\x9a\x06\xdb\xf1\xee\x22\xe1\xc6\x91\x17\x50\x04\x5c\xad\xa7\x89\x43\x99\x94\x24\xd9\x15\x69\x61\x2c\x51\xc3\xa8\x7b\xb8\xe3\x58\x0b\xbd\xb7\xb7\x50\x01\xe0\xc3\x03\x0c\x63\x77\xad\x6a\x00\x2a\xb6\x74\x77\xdb\x94\x26\x66\x05\xcb\x53\xe5\x49\x8a\xa3\x3f\x59\x5d\x65\x61\x3d\xdd\xdd\x20\x4b\xf0\x52\xde\xfe\x8b\x4d\xf4\x68\xf6\xe7\x48\x64\x9b\x62\xae\x56\x45\xce\xcd\xd7\xc6\xd0\x44\x80\x14\x07\x70\x64\x9b\xb7\xc4\xb1\x6f\xa6\xaa\x88\x77\x8b\x22\x68\x67\x85\xc6\xcf\xd0\x95\x7f\xc4\x21\x4a\xc8\x02\x34\x5e\x9e\x43\xbd\xfa\x03\x56\x61\xe6\x2a\x14\xb0\x5c\xcb\xda\x4f\x6c\x9f\x9c\x7e\xc0\x62\x35\x24\xc0\xdc\xfb\x47\x45\x8e\x9c\x26\x2b\x2c\x0f\xc3\x23\x06\x14\x59\x78\xa4\x04\x82\x2f\xaa\x5b\xed\xfa\x87\x9d\x0e\xe6\x6b\x70\x2c\x3c\x48\xea\x84\x5f\xbb\x66\x67\x69\x09\x42\xe3\xbb\xbf\xa3\x0a\xc7\x37\x21\x16\x48\x35\x9c\xc6\x6a\xf0\x79\x1f\x2f\xbc\xf3\xf4\x34\xab\x41\xc3\x88\x89\xf5\x6c\x8e\xa3\x6d\x17\x6d\xe0\x6f\xd1\x68\x8b\xdd\x53\x57\x82\x54\xc3\x9d\xfc\x40\xd5\x0e\xb4\x41\x3b\x01\xae\xc8\xe8\xa2\x6d\x53\x3c\xca\xbd\x65\x09\x1e\x60\x66\xf4\xd9\x3b\xaa\x01\xd1\x61\xe5\x05\xd4\x05\x3d\x62\x16\x88\xe8\xb6\x99\x77\xa1\x5d\xac\x2d\x8c\xb4\x1b\x20\xed\xe4\x18\x5d\x5a\xe4\x8e\x9c\x80\xbe\x6d\x3c\x1a\x9d\xbf\x37\x63\x91\x99\x15\xdd\xd3\x97\xff\x2c\x10\x2c\x6e\xc2\xac\x64\x5c\xfe\x6c\xb3\xfb\x58\xa1\xb3\xcd\x25\xb1\xaa\x16\xdb\xda\xc5\x3b\x00\xdc\xea\xbf\x14\xb0\xb4\xe2\xcf\x8f\xb1\x53\xa6\x5b\x22\xd6\x48\x30\xcd\x43\x68\xfc\xcf\x51\x54\x76\x24\xa9\x2e\x6f\xfc\x03\xf7\xdc\xfd\x83\x38\x2b\xbc\xd8\x1f\x21\xb3\x1a\xba\xaf\x62\x4d\x39\x66\x48\x47\x46\xe9\x2f\x1b\xbd\xf6\xce\xc8\x0b\xf2\x59\x55\xc1\x9e\xe6\xba\x78\x1a\xa3\x1f\xe5\x0f\xc6\x47\x0f\xbf\x33\xea\xbd\x74\x39\xe9\xec\xe1\x09\xed\x84\x70\x94\x6c\xa4\x3e\xd2\x0f\x4f\x7a\xe3\xde\x13\x1b\xd1\x76\xd2\xa9\x4a\x2d\x15\x38\xa1\x4a\x75\xfa\x9b\x8c\x88\xaa\x51\xd6\xc9\xa8\xe4\x0a\x4c\xb1\x42\x8a\x46\xd5\x06\xa2\x43\xba\x1f\xb0\x94\xef\x3f\xc1\xfd\x74\x51\x67\x2c\x92\x48\x6a\xf7\xc2\x13\xe1\x29\x3f\xc5\x8a\xeb\x47\xf2\xac\x33\x7e\xce\xbb\x0a\x65\x9f\xe2\xbd\x71\x5c\x6b\x3c\x2d\xb2\x1a\xaa\x19\x39\x2c\xb0\x56\xd5\x1f\xa3\x27\x52\x38\xb7\x3a\x8d\xa1\xaf\x8f\x55\x79\x1b\x71\xe9\xd7\xbf\x91\x39\x3a\xbd\x86\x09\x79\x55\xf5\xe0\xf6\xbc\x11\x32\x99\xa4\x1c\xa4\x68\x4c\x72\x85\x73\x31\xde\xb5\xa0\x84\xae\x15\x26\x32\x71\xd1\x70\x6a\x3a\x23\x2d\x92\xe3\x6c\x4a\x25\xe0\x69\x6e\x36\xf2\xe7\x86\xb7\x2d\x5e\x3d\xaa\x15\x86\xea\xf9\xc8\x3a\xe9\x93\x89\x15\x6d\xeb\x07\xab\x2e\xc1\xb1\x37\x23\x83\xa4\x83\x33\x87\x17\x3a\xe6\xf0\x0a\x2f\xa0\x0e\x14\xee\x36\xe1\xe6\x33\x0d\x7c\xaa\x69\x42\x46\x55\x2d\x78\x76\x05\x8e\xe3\x3a\x56\xee\x9e\xd9\x32\xdd\xfa\x2e\x99\xe8\x70\x67\xee\x0d\xf5\x82\xe7\xd7\x1d\x92\xf3\x87\x34\xb6\xfc\xd3\xa8\x02\x87\x09\x09\xe6\x47\x3e\xf4\xd8\x7d\x67\x2d\x29\xef\x70\xe5\x6c\xe5\x36\xaa\xc0\x24\xf8\x1e\xd7\xd1\xe0\x0a\x09\x3e\x4a\xbd\xe0\xc2\x6d\xc3\x32\x54\x19\x3e\x13\xf2\xae\xd3\x51\x61\xf6\x2f\xfd\x62\xe8\xa8\x29\x34\xa7\xd8\xfa\x4f\xa3\x51\x47\x7e\xfd\xc8\xc7\x68\x3a\x8a\x77\xec\x41\xf2\x31\x4c\xaa\xe6\xe5\x6b\xd6\x2e\x7d\x9f\x02\xc0\xcb\x91\x8b\x76\xc9\xf7\x30\xd0\xe9\xdb\x04\xaf\xc6\x46\x65\xf8\x3b\x33\xb7\x82\xf0\xb7\x40\x00\x0d\x2a\x1e\x35\xf0\xed\x97\xd1\x6e\x75\x73\x34\x7f\x8c\x85\xf5\xa9\x17\x0c\xbc\xaf\xc9\xd0\xa4\xcd\xbe\x9b\xb4\x85\x9b\x33\xc2\x27\xe4\x23\xa2\xbd\x51\xcd\xa5\xbd\x7b\xfd\xae\xb6\x5d\x60\x9e\xe1\x3a\x16\xfe\xbd\x1d\x2b\x8a\x47\xda\xb8\x8e\x95\x16\xf3\x68\x0f\x77\x8d\x9b\xb2\xc7\x0c\xa1\xef\xac\x6d\x2b\x65\x69\xd7\x29\xf8\xe9\x1f\xbd\x65\xdf\x4b\xbe\x43\x8f\x99\x7b\x59\xc7\x6e\xcc\x4f\x9d\x31\xf6\xb8\xec\xf6\xe3\xbf\xfd\x61\x7f\x21\x8b\xdc\x73\x4a\xd1\xff\xff\xac\x65\xe9\x3a\x0c\xf9\xb8\x74\x9e\x23\xf4\x85\x77\xa1\x74\xee\x07\x5e\x78\x1f\xf9\x9d\x75\x52\xe9\xf6\xf1\x19\x90\x88\x19\x72\x89\x9d\x60\x80\x1f\x6f\x6a\x92\x03\x65\x39\xb2\xc1\x79\xd6\x2e\x5e\x13\x22\x02\xed\x68\xd8\x3b\xad\x43\xbf\xf8\x0b\x0d\xcd\x82\x53\x5a\xb5\x38\xd1\xc1\x09\x6d\x72\xe5\x9c\x2e\xe2\x1a\x96\xfb\x64\x09\x6a\xd1\x9d\x9e\x17\x22\xfe\x7d\x89\xd8\xa1\x42\x6b\x27\xaf\x2a\x3f\x70\x92\x39\x4c\x9a\x5e\x7c\x42\x14\x6b\x54\x15\x7b\x7d\xeb\xea\x7d\xf3\x57\xf5\x4e\xde\x98\xfc\x78\x48\xba\xd3\xd4\xa7\x87\xa1\x9f\xac\x3a\x89\x6c\x8c\x89\x9b\xc6\x4d\x29\x5f\x03\xa8\x95\x79\x98\xd9\xf2\x7c\xf0\x8c\x4f\x48\x4e\xf0\xa6\xc2\x7a\xc0\x46\xf9\xa3\x7a\x36\x8e\xcf\x94\x1b\xd9\x30\x25\x87\x7c\x74\xc9\xa8\xb7\x5b\x3f\x7e\x59\xc5\x89\x1e\x4a\xbc\x2c\x3e\x5f\x97\x21\x99\xd6\xc2\x0e\x01\x6f\xa0\x74\x7d\x76\x60\x32\x21\xdd\x94\x9e\xd1\xa0\x9d\x90\x74\xc7\xf0\x5f\x7a\x5e\xd0\xe8\x34\xc9\xd3\x0f\x95\x8d\x9a\x01\xc7\xf5\x76\xbc\xbd\x34\xf1\xaf\x94\x6a\xe2\x59\x87\xcd\xd8\xda\x4d\xbc\xf3\xbd\xac\x97\xe5\x0f\xab\x1a\x16\x61\xba\xf7\x85\x57\xde\xef\xb1\xb5\xfa\xb3\xec\x55\xd1\x1f\xb9\x5b\x8b\xca\xbd\x0e\xbf\x56\x09\x04\x17\x14\xce\xa5\x47\x33\x5f\xe6\x09\x12\x25\xe4\x82\x2e\x05\xf9\xa0\x38\x07\x39\x43\x29\xfb\xf6\xd5\x98\x94\xd7\xef\x35\x2d\xb1\x76\x3a\x92\x69\x00\x9d\x84\xb2\xa2\x5e\xb3\x5d\x63\xca\x7b\xca\x08\x79\xc5\xcd\x78\x24\x18\x79\xbc\xa7\xe5\xb6\x8f\x39\x11\x56\x6a\x47\xb5\x0b\x66\x7f\x94\x55\x05\x79\x38\x8e\xa1\xe6\x8c\x20\x73\x71\x41\xe8\xb7\xba\x8c\x80\x6e\xbf\x94\x33\x4a\x70\x20\xbc\x14\x9f\xa4\xc1\xf5\x20\xb8\x6a\x68\x6f\xb8\xb5\xe3\xe5\xd9\x6d\xb3\x4d\xa1\x31\xd7\xf0\xcc\x06\x66\x0a\xcb\x9d\x3e\x8d\x49\x43\x0f\xa0\xef\x60\x4a\x5c\xd8\xb1\xe0\x96\x12\x4c\x67\xf5\xa5\x71\x73\xc6\xe4\x8b\x6b\x0e\x25\x48\x2f\x39\x23\x04\x64\x09\xce\x81\x3f\xc0\xcb\x5f\xc8\x93\xc3\xb5\x58\xd1\x35\xb8\xf8\x80\x78\x81\x5a\xd0\xa6\x63\x21\x7f\x66\x33\x43\xc8\x3f\x69\xa9\x78\x78\x20\x84\x32\x95\xee\x25\xdd\xfa\x16\x15\x8b\x0f\xde\x77\xf0\x4f\x97\x89\x8e\x34\x7e\xf8\xe2\x76\xf8\x3a\xfc\xd5\x87\x26\x2b\xe7\x0d\x54\x46\x24\x35\x3b\x0d\xe6\x25\xec\x5c\x53\x8d\xc5\x4a\xd2\xfe\x44\x42\x10\x48\xcf\x58\xe8\x2d\x98\xab\x07\x56\xac\xcb\xbb\x9b\xd1\x49\xd1\x7d\x28\x49\x43\xa8\x9c\x4f\x7a\x9c\x3f\x77\x5a\xa9\xce\xed\x23\xa9\x90\x67\x19\xd9\x82\x35\x75\x96\xa0\x77\x47\x4a\x51\x9f\xbf\xd5\xf1\xb8\x3b\x4c\xbe\x73\xd7\x30\x35\xff\xf1\x30\x3a\x09\x57\x7b\xf3\x95\x76\x7e\x89\x79\xe9\x65\xd3\x5f\x9a\xb5\x87\x2e\xe1\x26\x2a\x40\xa2\xa4\x9d\x67\xb8\x14\xc5\xfb\x53\x31\x8f\xe2\xf1\x5b\x4a\xd4\xbc\x37\xd0\xd2\xf3\x58\xa6\x18\x0d\xfb\xf1\x77\x7c\xea\x51\x48\x51\xf8\x1c\xd3\x88\x0e\x60\x36\xac\x50\x95\xd5\x5d\xef\x18\xbf\xfd\x41\x20\x37\x28\xc3\x67\xce\x68\x1e\xec\x74\x49\xc4\xad\xc8\x59\x59\xd4\xa8\x70\xb8\xe0\xa2\x04\xa1\x7d\xd2\x21\x3f\xbe\x4e\x9e\x97\x1d\x40\xb1\xaa\xbf\x22\xa3\xfd\x66\x14\xe4\xc7\x5b\x3a\xdf\xd1\xb5\xfd\xbd\x5b\xe5\xea\x3d\xe0\x37\xa2\x91\x5c\x5e\xb5\x84\x47\x06\x6f\x35\xc3\xa7\xb0\xa2\x7b\x5e\x47\x7c\xa8\xd1\x76\xaf\xa4\x1e\xc5\xb9\xfb\x82\x37\x51\xef\x6e\x5f\xa0\xe2\x39\xad\x35\x3b\x6c\x34\x5f\xf9\x60\x45\xf3\xef\xeb\x5d\x5c\x11\x45\xd9\xd9\x73\x29\xf1\xa8\x58\xb9\x66\x52\xb1\x55\xbe\x60\xf7\x06\x1e\x07\x65\xb9\xed\x7a\x30\x38\xe0\xc9\x74\x97\xd1\x95\x8b\x50\x60\x28\x63\xee\x6c\xe2\x04\x83\x9c\x47\xab\x4d\xdd\x3b\xdd\x32\xdc\x9d\x7f\x76\x1e\x06\x78\xa8\xe7\x8b\xe6\x01\x6a\xdf\x45\x49\x8f\xaf\xe3\x26\xf3\x44\xd8\x48\xb8\xd3\x89\xf2\xe3\x34\xaa\xee\x47\x6f\x76\x32\x1e\x79\x25\xac\x77\x31\xea\xdb\x8f\x50\x23\x9b\xb2\x93\xe6\x6c\x00\xa5\xad\xce\xbe\x81\xf3\x71\x86\x08\x4f\xc3\x59\x59\x1e\x5b\xb9\xa7\xe8\xd0\xf3\xae\xe5\xdf\x1e\x00\x3f\x76\x01\x99\xfa\x9a\xb8\xab\xf5\xaf\xb3\x83\x68\xab\xda\x42\x83\x7c\xaa\x55\x51\x74\xa3\xfa\x0c\x11\xf2\x5f\xa1\xb4\x99\x17\x47\x4f\x23\x83\x57\x92\x3e\x3f\x6c\xcb\x2b\x13\xec\xb9\x68\x38\xb6\x38\xb6\x51\x11\xea\x2f\xbc\x7e\xfb\x7c\x1a\x3a\xd5\x62\x64\xb6\x47\xcf\x76\xfe\xc6\x47\x3d\xbb\x15\x2d\xa4\x6c\x3e\xfc\x64\x46\xc8\x9f\x43\x7d\x4b\x9f\x83\x11\x92\x61\x67\xb7\xe7\x82\x9a\x91\xdb\xe6\x9b\x7a\x1f\xf3\xef\x49\xec\x54\xff\xd5\xb5\xe7\x92\xf8\xa7\x6d\xe7\xd9\x9b\x8e\x03\x73\x6e\xcb\x7b\xd4\xf0\x37\x04\x3b\x85\xab\x97\x6e\x37\x6a\x14\xcc\xcb\xfd\x0b\x1e\x95\xbd\xa6\x1e\x66\x3b\x98\x47\x58\x89\x97\xea\x9e\x5b\xac\x12\x61\x86\x31\x33\xe6\x35\x43\xb4\x40\x4f\x17\x66\xee\xd3\x96\xa1\xbd\x3c\x15\x18\xd3\xb6\xb1\xf2\xbc\x2c\x6e\xf5\xc6\x50\xf7\x32\xf9\xc2\x66\xb6\x74\x8c\x1f\xdb\x21\x68\x33\x61\xe5\x37\xf5\xe1\x65\x32\xee\x34\x50\x2d\x22\xe5\x39\x9f\x3f\x97\x1e\xb0\xb4\x73\xb6\xbd\x05\x63\x6b\x72\x8c\xed\x5c\x2b\x21\x28\x1a\x41\xb4\x3e\xc8\x64\xa0\x7b\xad\xe3\xf2\x6e\xd7\x4a\x08\x2e\x8d\x20\x1d\xad\x4f\xe5\xb1\xa6\x26\x71\x79\x7a\x75\x12\x99\x45\x23\x48\xc7\x9b\x06\xac\xe9\xe8\x45\x1d\xd5\xcb\x24\xcf\x6c\x59\x5c\x7a\xc9\x3c\x96\x78\x0a\x3a\x4a\xd5\x8f\xd6\x76\xd3\x0e\xdd\x4c\x58\x69\x6e\xc3\xce\x4f\x80\x43\xe5\x1e\x9d\x9e\x6c\x07\xbb\x9d\xea\xbf\xc8\x8b\x72\xf8\x1b\x01\x6c\x38\x6a\xed\xfc\xe9\x16\xc6\x96\x6d\x4d\x6e\x0d\x44\xb7\xbe\x66\x88\x54\x8e\xe5\x12\x44\x59\xdd\x86\x41\xf0\xc6\x4d\x07\xcf\x9f\x6b\x91\x25\x3a\xb0\x8c\x99\x2b\xe1\x56\xe2\x37\x73\x74\x0d\x64\x9c\xeb\x7d\x3f\x83\x64\xda\x20\x8b\x4b\xbf\x42\x4c\x84\x96\xa8\x15\x51\x9b\xdd\x68\x31\x9b\x09\x2b\xf5\x81\x80\x15\x80\x3e\x2c\x60\x88\x2a\x6a\x6b\x31\x03\x05\xd6\x64\xb7\x40\xb4\x4e\xeb\xd3\x52\x41\xa3\x06\x82\xe3\x7a\xdf\x0f\xe8\x77\xd3\x6e\x7d\x5a\xea\x83\xe3\xa9\x04\x94\x5a\xbb\x64\xfd\xf3\xcf\x5a\xb7\xdc\xbb\x33\xe0\x1a\xb3\x9f\xaa\x1f\xdd\xd4\x58\xe4\x70\xfe\x5c\x8b\xcc\xc7\xd3\x27\xe4\xe6\x1f\x97\x99\x49\x7c\x33\x64\xca\xe2\xd2\x7d\x6d\x87\xb6\x43\x6a\x05\x2f\x3c\xfd\xbb\xd6\xee\x87\x92\x3a\x9e\x60\x78\x3a\xd1\xb2\x3f\x62\x62\xa4\xc3\xad\xc4\xd5\x63\x23\xc7\x51\x03\xf8\x81\xa2\x9d\xac\xc6\x77\xf7\x37\xbe\x62\x88\xfc\xdf\xe7\x5a\xef\x6d\x69\xda\x11\x28\xeb\x5e\x6e\x48\xca\x1b\x41\x6a\xaa\x1e\xa5\xe0\x91\x89\x70\xb3\xdd\xd7\x1f\x16\xaf\x59\x08\xd2\x7a\x0f\x83\x61\xa0\xe9\x5e\xe4\xd4\x55\x45\x5f\x57\x39\x9e\x85\x4e\x92\x11\x27\x57\xe9\x5e\xf5\x1a\x74\x5d\xb3\x49\x50\x63\xa6\x58\x17\x94\xfc\xa2\x66\xea\x4e\xb8\x85\xac\x8f\x70\x93\x90\xbe\xbe\x0a\x6c\x0e\x63\xa4\x9f\x55\xda\xfb\x9a\xac\xa5\x0b\x49\xc5\x0b\x83\xa0\x23\x6a\xcc\x8e\xa2\x52\x32\xa6\x72\x3d\xd2\x64\xb8\x00\x0d\x78\xf2\xbd\x3e\xc7\x89\x72\x95\x31\xeb\x09\x0a\xdc\xe1\xd3\xb4\x09\xb4\xf8\x04\x92\xb9\xb3\x2b\xca\xc0\x77\x9d\x6c\x70\x40\xc6\x56\xc2\x5b\x05\xc0\xd8\x2f\x11\xef\xa5\xa8\xeb\xd1\x2e\x3e\xe9\x5c\x7e\x7e\x0a\xcb\xc0\xd4\x36\x16\x1a\xa8\xfa\x56\xad\x01\xf5\xbc\x8f\x44\xb2\x06\x87\x0f\xfa\x03\x30\xb3\xcd\x2e\x2b\x9e\x9a\xb8\xee\x32\x91\x2c\xfc\xa4\x45\x1b\x43\xf3\x34\xc5\x15\xcf\x46\x0d\x4c\x22\xd6\xeb\x6b\x7f\xf2\x6e\xe9\xda\x15\x19\x80\xc8\x0a\xbb\x6f\x4c\xfc\xfd\xef\xba\x40\xdf\x28\x1c\xf1\xf8\xd0\x5b\x3f\xf0\x00\xa3\xa2\x4c\x3c\x40\x36\xa8\x5a\xab\x3e\xe1\xb4\x8e\x88\x31\xa3\xd8\xa0\x0c\xe0\x14\xe6\xea\xb6\x2d\x39\x32\x05\xa7\xd7\x95\xa7\x8b\xe1\x03\x7a\xf6\x7d\x87\x50\xb6\x52\xbf\xe2\xa6\xe3\x7c\xee\x37\xaf\xf1\x0f\x4b\x94\xa2\xd2\x2c\x16\x5f\xa7\xc9\x00\xe1\xfd\xa7\xbe\x4d\x2f\xbc\x36\x3b\x6f\x5f\xe3\x50\xb4\xc5\xa4\x46\x55\xd9\xff\xfb\x00\x00\x8f\x17\xb9\xe8\x84\xdd\xb1\x6b\x2a\xd7\x84\x05\x7c\x99\xe1\xf1\x4d\x65\x40\x13\x78\x08\x48\x17\x05\x16\x51\xff\x3f\x1e\x87\x03\xbb\x96\x47\xb4\xb1\x80\x41\x12\xf5\x6c\x7d\xee\x65\xb4\xcc\x5e\x0b\x4e\x59\x51\x4a\x0a\x7f\x68\xaf\x7e\x1f\x80\x15\x89\x07\x0a\x35\xd5\x7d\xeb\xa6\xba\xc3\x65\x47\xfb\x66\x7c\xce\x1b\x42\x15\x4c\x4b\xe1\x0b\x9d\x04\xf3\x90\x75\x99\xcf\xd2\x48\x77\xdf\x4a\xa7\x29\x16\x98\x89\x43\xed\xe3\xe4\x3f\x74\x7c\x5e\x43\xb5\x6c\x8b\xfe\x2f\xae\x26\xb7\x69\xab\x3a\xa2\x87\x48\x20\x74\x98\xa3\x70\xe4\x40\x34\x67\x6f\x5b\x8d\x6f\x7a\x31\x48\xef\xe9\x08\x55\xef\x67\x2c\x8a\x2b\x71\x29\x6a\x71\x57\xf7\x51\x93\x1f\xa0\x6a\x40\xc9\xd4\xb8\xc9\x86\x25\x85\x1b\x3d\x7f\xf1\xc9\x8e\xf9\x9d\xc9\x85\x97\x4b\x27\xe9\x22\x47\x3b\x2c\xa8\x7b\xd1\xbb\x8c\x29\x3b\x95\x26\xad\x8e\x1d\xd8\xf3\xca\x5e\x50\x0d\x40\x3b\x76\xa8\x60\x74\x92\x32\xd1\xe1\x8c\xb4\xc9\xd6\x65\xf9\x97\x60\x81\x68\x9c\xff\x97\xe3\xb5\x93\x69\x21\x94\xae\x14\x1b\xb3\xcd\xf6\xb5\xcd\x78\x80\x8c\xc2\x33\x8a\x0f\x54\x0b\x7c\xee\x2c\x00\x95\x0d\x4b\xb9\x59\x06\x00\x72\x63\xb6\x5e\xb9\xbf\x08\x95\x0d\xc4\x4a\x7a\xe8\x0f\x25\x6c\xb8\x5b\x89\x86\xc4\xb6\xf5\xea\xe2\x1a\x74\xae\xce\x3f\xef\xbb\xf8\x8f\xa6\x72\x73\x7e\xee\x27\x13\x01\x3f\xfb\x33\x33\xe9\x96\x82\xa1\xc9\x21\xf9\x6a\x86\x49\xdb\xe8\xf3\xcc\x1d\x00\x7a\x09\xfd\x9e\x51\x9d\xcf\x51\xc9\x3b\xbf\xb0\x0b\x31\x45\x3e\x35\x1f\xa9\xcd\x46\x43\xe2\xe6\x78\x54\xdd\xfe\xaf\xf6\x6e\xd6\xb7\xbb\x75\x7b\x50\xa3\x70\xce\x99\x27\x51\x81\xd8\x77\x09\x78\x51\x3c\x62\x1b\x76\x6d\x0b\x65\x57\xbf\x53\x70\x75\x9d\xaa\x78\xb8\x39\xb4\x79\x0a\x0d\x7a\x41\xf3\xb5\xcb\x6a\xe2\xb4\x3f\x46\xdd\x12\x66\xbd\x69\xca\x0c\x02\x76\xb0\xce\x86\x8c\x3a\x75\x77\xab\xdd\xc6\x66\xe5\x05\x62\x5e\xf2\x5e\x47\xe3\x9a\x50\xe7\xd8\x09\xaf\xcb\x85\x58\x60\x66\x29\x0a\xa4\x19\xd6\x9d\xe8\x73\xa4\x74\xb9\x7c\x1d\x74\x48\x3d\x68\x87\x09\x08\xfd\xef\x29\x55\xc5\xa1\x67\x14\xc6\x41\x24\xfe\x98\xd2\xb4\xdd\x9d\xc6\x26\xc5\x24\x3c\x43\x2a\x8e\x72\xc2\xb0\x8a\x0a\x42\x72\x01\x1d\x0a\x61\x9d\x95\x9c\x76\x51\x3b\x60\x34\xb0\x1d\x9e\x85\xdd\x98\x1d\xde\x73\x09\xbb\x7d\xb7\x41\xf7\xe4\xf8\x7b\xa5\xd3\xf1\x49\x24\x51\x74\xd8\x5e\x66\xb7\x84\x1a\xcb\xe6\x84\x96\xf4\x94\xdb\x40\x6d\x43\x1e\xe5\x49\xdf\xe7\xba\xad\x9e\x81\x63\x8a\x3d\x2a\xea\x78\x75\x94\xb1\x87\xda\x01\xd5\x5e\x77\xfe\xb7\xa6\x55\x4d\x71\x29\x3f\x10\x4a\x56\x76\xa8\x21\x30\x40\x5c\xe6\x67\x4f\x61\xa1\x30\xd1\x10\x43\xf1\x4e\x92\xe7\x69\x8a\x89\x0c\xf3\xb3\xb1\x9d\x81\x8d\x0f\x89\x70\xb8\x86\x70\x57\x77\x1a\x3c\xa4\x98\xfb\x38\xa3\xe9\xcf\xbb\x1b\xc7\xa8\x36\xb1\x92\xd3\xb8\x34\xa9\x01\xb9\x01\x99\x54\x35\xde\xf5\xcc\x99\x1c\x33\xc1\x3d\xd8\xb7\x9e\x25\x0e\x1b\xb6\xfb\xba\x68\x46\xc3\x21\x64\x78\x9e\xff\xf2\x3c\x19\x46\xd3\x86\xf8\xad\x1a\x39\x1f\x72\xdd\xf9\x47\x52\x26\xf5\x35\x73\x15\xbf\x53\x37\xc8\x63\xd2\x1d\x1f\x46\xfd\x4f\xff\x42\xdd\xe8\x98\xd5\x0d\x02\xb4\xd9\xe4\x17\x8e\xf4\x10\x00\x00\x50\xc8\x1e\x4e\xf7\xf6\xd3\xfe\xf8\xbf\x00\x00\x00\xff\xff\x65\x68\xf2\x4f\x10\x0f\x00\x00"

func iconsUpdateAvailablePngBytes() ([]byte, error) {
	return bindataRead(
		_iconsUpdateAvailablePng,
		"icons/update-available.png",
	)
}

func iconsUpdateAvailablePng() (*asset, error) {
	bytes, err := iconsUpdateAvailablePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icons/update-available.png", size: 3856, mode: os.FileMode(0644), modTime: time.Unix(1657375458, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xdc, 0xcf, 0x7e, 0x97, 0xb0, 0x94, 0x8d, 0xef, 0xed, 0x6f, 0x33, 0xa8, 0x1d, 0xfd, 0x41, 0x7e, 0xbf, 0xd5, 0x65, 0xcc, 0x17, 0xc8, 0x95, 0x54, 0xa3, 0xcc, 0x51, 0x27, 0x7a, 0xf2, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/.gitignore.tmpl":          tmplGitignoreTmpl,
	"tmpl/ak.json.tmpl":             tmplAkJsonTmpl,
	"tmpl/dotenv.tmpl":              tmplDotenvTmpl,
	"tmpl/info.plist.tmpl":          tmplInfoPlistTmpl,
	"tmpl/items.main.tmpl":          tmplItemsMainTmpl,
	"tmpl/release.yml.tmpl":         tmplReleaseYmlTmpl,
	"tmpl/scriptFilter.main.tmpl":   tmplScriptfilterMainTmpl,
	"tmpl/scriptFilter.root.tmpl":   tmplScriptfilterRootTmpl,
	"tmpl/scriptFilter.update.tmpl": tmplScriptfilterUpdateTmpl,
	"tmpl/varsArgs.main.tmpl":       tmplVarsargsMainTmpl,
	"icons/update-available.png":    iconsUpdateAvailablePng,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"icons": {nil, map[string]*bintree{
		"update-available.png": {iconsUpdateAvailablePng, map[string]*bintree{}},
	}},
	"tmpl": {nil, map[string]*bintree{
		".gitignore.tmpl":          {tmplGitignoreTmpl, map[string]*bintree{}},
		"ak.json.tmpl":             {tmplAkJsonTmpl, map[string]*bintree{}},
		"dotenv.tmpl":              {tmplDotenvTmpl, map[string]*bintree{}},
		"info.plist.tmpl":          {tmplInfoPlistTmpl, map[string]*bintree{}},
		"items.main.tmpl":          {tmplItemsMainTmpl, map[string]*bintree{}},
		"release.yml.tmpl":         {tmplReleaseYmlTmpl, map[string]*bintree{}},
		"scriptFilter.main.tmpl":   {tmplScriptfilterMainTmpl, map[string]*bintree{}},
		"scriptFilter.root.tmpl":   {tmplScriptfilterRootTmpl, map[string]*bintree{}},
		"scriptFilter.update.tmpl": {tmplScriptfilterUpdateTmpl, map[string]*bintree{}},
		"varsArgs.main.tmpl":       {tmplVarsargsMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
