// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/info.plist.tmpl (872B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplInfoPlistTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\x9b\x30\x10\x85\xcf\xf0\x2b\x5c\xdf\x63\x27\xb7\xaa\xf2\xb2\xda\x84\xad\x14\x29\xda\x22\x95\xb4\xea\xd1\xd8\x13\xea\x16\x6c\x64\x9b\x52\x84\xf8\xef\x15\x21\x59\x92\xad\xa5\xf6\x66\xcf\x9b\xf7\xcd\x3c\xcb\xec\xf1\x77\x5d\xa1\x5f\x60\x9d\x32\xfa\x01\x6f\xc8\x1a\x23\xd0\xc2\x48\xa5\xcb\x07\x7c\xcc\x3f\xae\xde\xe3\xc7\x24\x66\xef\xd2\x4f\xbb\xfc\x5b\xf6\x8c\x9a\x4a\x39\x8f\xb2\xe3\xf6\xb0\xdf\x21\xbc\xa2\xf4\xa9\x69\x2a\xa0\x34\xcd\x53\x94\x1d\xf6\x9f\x73\xb4\x21\x6b\x4a\x9f\x5f\x30\xc2\xdf\xbd\x6f\x3e\x50\xda\x75\x1d\xe1\x53\x17\x11\xa6\x9e\x1a\x1d\xcd\xac\x69\xc0\xfa\xfe\xa0\x9c\x5f\x6d\xc8\x9a\x48\x2f\x71\x12\xb3\x99\x7e\xb7\x4e\x12\x47\x4c\x2a\xe1\x93\x38\x8a\xd8\x4f\xe8\x93\xa2\xd5\xb2\x02\x25\x19\x9d\x6e\x53\xd5\x79\xab\x74\x99\x0c\x03\xd9\x9e\xb5\x7d\x3a\x8e\x8c\x5e\xaa\x71\x14\x0d\x83\x3a\x21\x0d\x88\xec\xb8\x87\xd2\xd8\x1e\xe1\xa3\x16\xf3\x59\x39\x90\x78\x1c\xaf\xf0\x4b\xb5\x0f\xc1\xaf\xee\xb7\x70\xd0\xf2\x06\x60\xb4\x06\xe1\x95\xd1\x6e\x61\xbc\xee\x4f\xef\x92\x08\x0b\xdc\x83\x2c\xc2\xd3\x66\x71\xfb\x66\xdc\xd9\x28\xc1\x09\xab\x9a\x69\x4a\xc8\x9a\x2e\x72\xc8\xac\x1c\x2f\x2a\xb8\x79\xbf\x13\xaf\x1c\xd0\xd7\x06\xcd\x6b\x08\x61\x5f\x78\x0d\x01\x9e\x29\x7e\x80\xf0\x37\x69\xb9\xb5\x7c\x3e\xd1\xe5\x38\x89\x16\xb8\xfc\x1b\xbd\x0c\x6e\x95\xe4\x9e\xff\xf3\xd9\x5a\x07\x56\x18\x7d\x52\x65\x6b\xf9\x14\x72\xbe\xfc\xc7\x02\x97\x8f\x15\x0a\xf7\x65\x96\x02\xf9\x3a\x28\xb8\x94\x16\x9c\x0b\xf9\xbe\x42\xf1\x34\xab\x77\xd6\xeb\xca\x8c\x9e\xbf\x74\xf2\x27\x00\x00\xff\xff\xf5\xfa\xe2\xd1\x68\x03\x00\x00"

func tmplInfoPlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplInfoPlistTmpl,
		"tmpl/info.plist.tmpl",
	)
}

func tmplInfoPlistTmpl() (*asset, error) {
	bytes, err := tmplInfoPlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/info.plist.tmpl", size: 872, mode: os.FileMode(0644), modTime: time.Unix(1659272503, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x5f, 0xbf, 0x7e, 0x78, 0x1c, 0x70, 0x6f, 0xf6, 0x60, 0x16, 0xfa, 0x1, 0xf9, 0xc4, 0x7, 0xce, 0x51, 0x36, 0x6e, 0x23, 0xf, 0xa9, 0x3a, 0x57, 0x76, 0x95, 0x15, 0x62, 0xbd, 0xe6, 0xef}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/info.plist.tmpl": tmplInfoPlistTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": {nil, map[string]*bintree{
		"info.plist.tmpl": {tmplInfoPlistTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
