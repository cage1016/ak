// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/ak.json.tmpl (719B)
// tmpl/cliitems.main.tmpl (162B)
// tmpl/cliitems.root.tmpl (1.499kB)
// tmpl/cliitems.update.tmpl (503B)
// tmpl/dotenv.tmpl (157B)
// tmpl/info.plist.tmpl (808B)
// tmpl/items.main.tmpl (1.519kB)
// tmpl/release.yml.tmpl (3.836kB)
// tmpl/varsArgs.main.tmpl (298B)
// icons/update-available.png (3.856kB)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplAkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x8f\xa3\x30\x10\x85\xfb\xfc\x0a\x8b\x9a\x83\x5c\x4b\x77\xe5\x75\x5b\x64\x6b\xcb\xd8\x13\x18\x81\x3d\x96\x3d\x24\xa0\x55\xfe\xfb\x0a\x87\x6c\x80\x8d\x56\xdb\xfa\xbd\xf9\xde\xf8\x69\x3e\x0e\x42\x08\x91\x35\x24\x2d\x19\xe9\x95\xee\x54\x03\x59\x25\xb2\x06\xb9\x1d\xea\x42\x93\x2d\xc7\x71\x2c\x55\xf7\x87\x21\x72\x96\xdf\xfd\x57\x0a\xdd\xb9\xa7\x6b\x56\x89\x3b\x21\xbd\x9e\xa9\x37\x10\xe6\xe9\xe2\xcb\x90\x3f\x65\xa7\x6c\x42\xff\xeb\xc4\xe9\xc9\x4a\x92\x81\xa8\x03\x7a\x46\x72\xb3\x63\x2d\x69\xc5\xd0\x50\x98\xa4\x26\x6b\xc1\xf1\xac\x3f\xde\x2a\x71\x22\xea\x63\x2e\xfe\x3b\x86\xe0\x80\x73\xf1\x16\xc8\x0c\x9a\xf1\x82\x3c\xe5\xe2\xdd\x2d\x56\x8c\x60\x5e\x51\xf7\x69\xf5\xe0\x4c\x0f\x12\x4d\x8a\x21\x5b\x8c\xe3\x58\xa8\x8e\x77\xfb\xea\x00\x8a\xc1\xc8\xfa\x1b\xe0\x0a\xb5\x54\xc6\x04\x88\x71\x96\x5a\x66\x1f\xab\xb2\xfc\xb1\xce\x34\x78\x81\x10\x97\xef\x1f\x8b\xbf\xc5\x31\x4b\xd2\x6d\x29\x7c\xf0\x46\x31\x6c\xeb\xbe\x33\x65\x00\x4f\xbf\x88\xda\xe0\x7a\xd4\xe0\xe2\x8e\xc7\x93\x87\x75\xcb\x71\xf0\x9e\x02\x8b\xc5\x2c\x5e\x04\x38\x8c\xad\x72\xdc\xc6\xf2\x41\xcc\xb7\xbc\x99\x63\x71\xf3\xd1\x09\x54\xd8\xb7\xf6\x38\x8d\xed\x96\x4d\xaa\x63\xb5\xa1\xf2\xbe\x47\xad\xe6\x33\x91\x68\xc0\x31\xf2\xb4\x1a\x3b\xdc\x3e\x03\x00\x00\xff\xff\x65\x6f\xb7\xd4\xcf\x02\x00\x00"

func tmplAkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplAkJsonTmpl,
		"tmpl/ak.json.tmpl",
	)
}

func tmplAkJsonTmpl() (*asset, error) {
	bytes, err := tmplAkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/ak.json.tmpl", size: 719, mode: os.FileMode(0644), modTime: time.Unix(1668783398, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x47, 0xfd, 0xb9, 0x81, 0xc2, 0x2a, 0xa5, 0xd0, 0x86, 0x77, 0xae, 0xa3, 0xb8, 0xd2, 0xf2, 0xf5, 0xcc, 0xdf, 0x31, 0x83, 0x6e, 0x23, 0x37, 0xdf, 0xd7, 0x6f, 0x69, 0xe4, 0xd7, 0x2d, 0xfd, 0xf5}}
	return a, nil
}

var _tmplCliitemsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x31\x0e\x02\x21\x10\x00\xc0\xfa\xf6\x15\x84\xea\xee\x0a\x78\x83\x31\xc6\xca\xc4\xd6\xca\x20\x20\xa0\x72\x4b\xc8\x62\x34\x64\x1f\xe4\x37\x7c\x99\x51\xbb\xa9\x46\xcf\xb0\xc6\xf2\xac\x29\x44\x12\xef\x97\xe8\x5d\x1d\xbc\xa9\xcc\x5f\xad\x1a\x45\xac\xcc\x30\x6b\x28\xc6\x5e\x4d\xf0\x22\x9b\xb4\x00\xa4\x5c\xb0\x92\x18\x61\x38\x0a\x19\x12\xc5\x76\x52\x16\xb3\xbe\x60\x44\x1d\xd0\x21\xf9\xe5\xae\x4d\x23\xbc\xa1\x71\x12\x60\x90\xbd\xab\x2d\xee\xd0\xed\xff\x11\xb3\xb6\xd9\x49\x98\x00\xce\x6d\xb1\xbf\x77\x9c\x44\x87\xc1\x66\xa7\x36\x0f\x6f\x1b\xf9\x71\x02\xfe\x04\x00\x00\xff\xff\x8e\x52\x7f\x95\xa2\x00\x00\x00"

func tmplCliitemsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsMainTmpl,
		"tmpl/cliitems.main.tmpl",
	)
}

func tmplCliitemsMainTmpl() (*asset, error) {
	bytes, err := tmplCliitemsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.main.tmpl", size: 162, mode: os.FileMode(0644), modTime: time.Unix(1659395971, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xf6, 0x3a, 0xee, 0xc7, 0xe, 0x2d, 0x59, 0x9e, 0xe8, 0xb5, 0xcd, 0x3d, 0xf1, 0x82, 0xef, 0x94, 0x9e, 0x81, 0xaa, 0x5d, 0x85, 0xf2, 0xbd, 0xc1, 0xc4, 0xbe, 0xea, 0x1c, 0xbd, 0xa2, 0xdb}}
	return a, nil
}

var _tmplCliitemsRootTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6e\xe4\x36\x13\x5d\x8b\xa7\x28\x13\xf8\x0c\xca\x5f\x87\xca\x20\xbb\x0e\xbc\x70\xda\x9e\x4c\x07\xc1\x20\x68\xc7\x13\x04\x83\x59\x50\x54\x49\x22\x4c\x91\x02\x7f\x46\x6e\x34\xb4\x4d\x4e\x92\xc5\x5c\x23\x47\x99\x93\x04\xd4\x8f\x27\xed\x20\x59\x48\x10\x58\xc5\xaa\x57\xef\xbd\x52\x71\x45\x76\xb6\x3f\x3a\xd5\xb4\x01\xfe\xfc\x04\xa7\x13\xff\x15\x85\x1b\xc7\xf4\x75\x13\x43\x6b\xdd\x38\x12\x72\x55\x90\x5e\xc8\x47\xd1\x20\xc8\xae\x22\x44\x75\xbd\x75\x01\x18\xc9\xa8\xb6\x0d\x25\x19\xb5\x7e\x7e\x17\xf8\x84\x92\x12\x92\x89\x01\x68\xa3\x42\x1b\x4b\x2e\x6d\x57\x54\x28\x8c\xf2\x2d\x16\x62\x68\x6c\x4a\xfd\xb7\x58\x11\xfb\x4a\x04\x7c\x91\xe2\xfb\xfa\xd5\x37\x85\xb4\xa5\x13\x94\xe4\x84\x48\x6b\x7c\x80\x39\xf5\x07\x5b\xbe\x15\x1d\xc2\x35\x50\xd9\xa2\x7c\x7c\x6d\xdd\xc3\x52\x83\x7c\x14\x2e\xa1\x74\xd8\xdb\x14\x3f\x9d\xf8\xf7\x53\xd1\x03\xf6\x76\x1c\x29\xc9\x86\x1a\x00\xae\xc4\xc0\x7f\xb1\xee\xb1\xd6\x76\x48\xd5\xeb\x68\x24\xec\xce\x6a\xb1\x1c\x4e\x24\x53\x35\x0c\x35\x9f\x4f\xa6\xf8\x6d\x4c\x91\xcb\x4b\xb8\x18\x6a\xbe\xf7\x87\x68\x8c\x32\x0d\x3b\x03\x36\xdd\xcc\xb4\x6d\xf8\x4f\x4e\x99\xa0\x0d\xa3\x4b\xde\x32\x00\x4c\xb0\x41\x19\x28\x85\x7c\x6c\x9c\x8d\xa6\xe2\x9c\xd3\x9c\x64\x99\xec\x2a\xd8\x5e\x43\x62\x95\xef\x6c\xd7\x09\x53\x31\xeb\xf9\x8d\x6b\xfc\xfb\xaf\x3f\x6c\x80\x2e\x74\xa5\x5c\x55\x03\x3a\x97\xd2\x87\x9a\x1f\xa2\xd9\x9b\xef\x9e\xeb\x9d\x43\xda\x24\x19\xf3\x6f\xa7\xf4\x8b\x6b\x30\x4a\x4f\x18\xbf\x80\xac\x19\xbd\x73\xce\x3a\xf0\x41\xb8\xf0\x12\xea\x16\xfe\xe7\xe9\x26\xdd\x4e\x6d\x47\x92\x8d\xe4\x9c\x9b\x9b\x8f\x42\x69\x51\xea\x85\xb6\x6c\xa8\xf9\xce\x9a\x5a\x35\xd1\x21\x13\x03\xbf\x8f\x7d\xef\xd0\xfb\x87\xfd\xad\x67\xc1\x45\xcc\xf3\x39\xeb\x2d\x0e\xfb\x80\x1d\xa3\x37\x66\xed\xa8\x3c\x88\xb5\xdc\x05\xcd\x79\xc2\x79\x1f\xcb\xa0\x82\x46\x46\x3f\xff\xfe\x07\x58\x07\x9f\x7f\xfb\x04\xc1\x82\x32\x3e\x08\xad\x61\x25\x65\x4a\x7e\x27\xb4\xaa\x58\x2d\xb4\xc7\xf9\xe0\x26\x06\x2b\x6d\xd7\x6b\x0c\xc8\xe8\xb0\x08\xbf\x3d\xbb\xb4\x97\xd6\xb0\x4b\x31\xf0\xf4\x71\x7a\x27\x74\xc4\xed\x4a\xf6\x57\xcf\x78\x78\x6f\x1a\x3a\xe6\x89\x80\x91\x90\xa2\x00\x67\x6d\xd8\x75\x15\x38\x4c\xf3\xa1\x09\x1e\x42\x8b\x50\x0a\x8f\x20\x67\xf9\x60\x68\xd1\x80\x14\x5a\x63\x05\x83\x0a\xad\x8d\x01\x84\x39\x82\x8f\xe5\x92\xe2\x27\xdf\xae\xb5\xae\xe1\x72\x32\xfe\xaa\xff\x89\x64\x0f\x1e\xb7\x00\x93\x9f\x93\x9c\xe3\x48\x37\x24\xbb\x6f\xad\x0b\xdb\xe9\xf0\x16\xbd\x74\xaa\x0f\xca\x9a\x39\x76\x88\x66\x0b\xc9\xd6\x2c\x19\xea\xea\xac\xde\x06\x84\x6b\x3c\xbc\xff\xe0\x83\x53\xa6\x99\x15\x7b\xe9\xfe\x59\x9e\x7b\x34\xd5\x6b\xc4\x2a\xf9\x34\x9d\x8d\x9b\x65\xee\xbb\x27\x94\x31\x20\x88\xaa\xf2\x90\x14\x90\xad\xd2\xd5\x3a\xb2\x4f\xda\x24\x1e\xd2\x48\xcf\x3c\xa4\xc7\x63\xf0\x50\x6b\xd1\x78\x10\x7d\xef\x6c\xef\x94\x08\xa8\x8f\x3c\x15\xfd\xb9\x55\x3e\xc9\xbf\x70\x55\x1e\xa1\x13\xca\xf0\xf4\x62\x39\x87\x7d\x00\x6b\xf4\x11\x0c\xe2\xdc\xa1\x15\x7d\x8f\x06\xac\x91\xf8\xf7\x86\xbb\xae\xe2\xf3\x4a\x2f\x28\x67\x53\xce\x3b\xc2\x26\x52\xe6\x99\xbf\xec\xcf\x7a\xed\xf9\xc2\x7f\xac\x8a\x36\x6c\x59\x84\xcc\x7a\x7e\xf7\xa4\x02\x7b\xb5\xae\x45\x9e\xe8\x99\x5a\x2b\xa3\xc2\xda\x17\xae\x41\x0c\xc9\xea\xcb\x52\xa6\x7f\xd2\x9b\x58\xb2\xf4\x97\xca\x37\x29\xf6\x06\x75\xff\x70\xf8\x71\x3a\xf9\x3f\x2d\x94\xf7\x11\x3d\x4d\x4b\x32\xd4\xd3\xee\xb3\x1c\x8a\x02\x3a\xd1\x28\x09\xb5\x75\xf0\x0f\x17\x93\xf1\xaf\x00\x00\x00\xff\xff\xda\x72\x0b\xf0\xdb\x05\x00\x00"

func tmplCliitemsRootTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsRootTmpl,
		"tmpl/cliitems.root.tmpl",
	)
}

func tmplCliitemsRootTmpl() (*asset, error) {
	bytes, err := tmplCliitemsRootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.root.tmpl", size: 1499, mode: os.FileMode(0644), modTime: time.Unix(1659453285, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x50, 0xc5, 0x89, 0xf7, 0xd9, 0x46, 0xff, 0x5d, 0xfb, 0x80, 0x2f, 0x4c, 0x66, 0xcc, 0x5e, 0xe5, 0x2e, 0xd, 0x65, 0x9a, 0x28, 0xbc, 0x87, 0x36, 0xc7, 0xc4, 0x58, 0xe5, 0xe6, 0xb6, 0x30}}
	return a, nil
}

var _tmplCliitemsUpdateTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x8a\xd5\x30\x14\x86\xd7\x39\x4f\x71\xcc\x42\xd2\xcb\x25\x45\xdc\x5d\xb9\x8b\xa1\x38\x4b\x11\x75\x16\x22\x2e\x32\xcd\x69\x1a\xa6\x49\xca\x49\xea\x55\x4a\x1e\xc8\xd7\xf0\xc9\xa4\xbd\xa3\xdc\xd9\x05\xbe\x9f\xef\xff\x4f\xda\x03\x74\x69\xfe\xc5\xde\x8d\x05\xff\xfc\xc6\x75\xd5\x5f\xc9\x70\xad\xdb\xeb\x6e\x29\x63\xe2\x5a\x01\x0e\x2d\xcc\xa6\x7f\x32\x8e\xb0\x0f\x16\xc0\x87\x39\x71\x41\x05\x42\x4e\xc9\x49\x00\x61\x2e\x28\x9d\x2f\xe3\xf2\xa8\xfb\x14\x5a\x4b\x26\xfa\x3c\x52\x6b\x2e\x2e\x49\x10\xb7\x2c\xcf\xc3\x9b\xb7\x6d\x9f\x1e\xd9\x48\x68\x00\xda\x16\x97\xd9\x9a\x42\x5d\xb0\xc8\x34\x33\x65\x8a\x25\x63\x19\xe9\x19\x60\x9f\x42\x30\xd1\xc2\x0f\xc3\x37\xd9\x33\xbe\xde\x2d\xba\xbb\xe2\x15\xc4\x43\xa6\x13\x22\xca\x6b\x48\x1e\x41\x7c\x1e\x13\x97\x13\xca\x87\xab\x69\x5d\xf5\x07\x13\xa8\xd6\x8d\x7d\x5a\xe2\x09\x87\x25\xf6\xaa\x0f\x16\x0f\x2f\x64\x47\x34\xec\x32\x7e\xfb\x9e\x0b\xfb\xe8\x1a\x5c\x41\x88\xcb\xa0\xbb\x14\x07\xef\x16\x26\x65\x2e\xfa\x0b\xfd\x2c\xef\x99\x13\x67\x55\x78\xa1\xa6\x01\x21\xa6\xe4\xf4\x47\xf6\xb1\x4c\x51\xc9\x6e\xa4\xfe\xc9\x47\x87\x43\xfa\xb7\x3c\x6b\xad\xe5\x16\xf4\x03\x12\x33\x9e\xce\xb8\x69\xb7\xe0\x7d\xe2\xeb\x4c\xd5\xbc\xdb\xd9\xab\x33\x46\x3f\xed\xd5\x5b\xf7\xbd\x29\x66\xda\xfb\x14\x31\x6f\x8e\x0a\xa2\x1e\xa1\x02\x6c\x57\xa0\x8f\xbe\xa8\x7d\x29\xa7\x54\xba\x60\xf5\x9d\xb5\xcf\xf7\xa8\xff\xff\xd6\x40\xfd\x1b\x00\x00\xff\xff\x8a\xd6\x7e\xaf\xf7\x01\x00\x00"

func tmplCliitemsUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCliitemsUpdateTmpl,
		"tmpl/cliitems.update.tmpl",
	)
}

func tmplCliitemsUpdateTmpl() (*asset, error) {
	bytes, err := tmplCliitemsUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/cliitems.update.tmpl", size: 503, mode: os.FileMode(0644), modTime: time.Unix(1659400155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xa9, 0xbd, 0x7e, 0x29, 0x7, 0x93, 0xc4, 0x44, 0x40, 0x39, 0xaa, 0xf7, 0x50, 0x7b, 0x92, 0xb4, 0xb, 0x94, 0x27, 0x97, 0x12, 0x7d, 0x71, 0x4a, 0x2c, 0xc4, 0x55, 0xca, 0x7b, 0x68, 0x30}}
	return a, nil
}

var _tmplDotenvTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcc\x49\x2b\x4a\x4d\x89\x2f\xcf\x2f\xca\x4e\xcb\xc9\x2f\x8f\x4f\x2a\xcd\x4b\xc9\x49\xcd\x4c\xb1\x55\xaa\xae\xd6\x73\x02\x73\x3c\x5d\x6a\x6b\x95\xb8\xd0\x15\xa6\x24\x96\x24\xda\x2a\xe9\xe9\x97\xa4\x16\x97\xa4\xe6\x95\xe9\x83\xf8\x98\xaa\x92\x13\x93\x33\x52\x91\x95\x81\x05\x30\xd5\x95\xa5\x16\x15\x67\xe6\xe7\x81\x6d\x0d\x83\xb0\x6b\x6b\x95\x00\x01\x00\x00\xff\xff\x62\x86\xbb\xd0\x9d\x00\x00\x00"

func tmplDotenvTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDotenvTmpl,
		"tmpl/dotenv.tmpl",
	)
}

func tmplDotenvTmpl() (*asset, error) {
	bytes, err := tmplDotenvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dotenv.tmpl", size: 157, mode: os.FileMode(0644), modTime: time.Unix(1659356539, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xd1, 0x5a, 0xd0, 0xa5, 0x5a, 0xc4, 0x1, 0x23, 0xc1, 0xe6, 0xf8, 0x29, 0x47, 0xda, 0x4, 0x37, 0x5b, 0x8c, 0x17, 0xe9, 0x18, 0xf0, 0x6f, 0x95, 0xdf, 0x18, 0xbc, 0x32, 0x48, 0xfd, 0xff}}
	return a, nil
}

var _tmplInfoPlistTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x8f\x9b\x30\x10\xc5\xcf\xe1\x53\xb8\xbe\xc7\x4e\x6e\x55\xe5\x65\xb5\x09\x5b\x29\x52\xb4\x45\x2a\x69\xd5\xa3\xb1\x27\xd4\x2d\xd8\xc8\x36\xa5\x08\xf1\xdd\x2b\xfe\x6c\xb2\x69\xbc\x37\x3c\x6f\xde\x8f\x37\xa3\x61\x8f\x7f\xab\x12\xfd\x01\xeb\x94\xd1\x0f\x78\x4b\x36\x18\x81\x16\x46\x2a\x5d\x3c\xe0\x53\xf6\x79\xfd\x11\x3f\xc6\x11\xfb\x90\x7c\xd9\x67\x3f\xd2\x67\x54\x97\xca\x79\x94\x9e\x76\xc7\xc3\x1e\xe1\x35\xa5\x4f\x75\x5d\x02\xa5\x49\x96\xa0\xf4\x78\xf8\x9a\xa1\x2d\xd9\x50\xfa\xfc\x82\x11\xfe\xe9\x7d\xfd\x89\xd2\xb6\x6d\x09\x1f\xbb\x88\x30\xd5\xd8\xe8\x68\x6a\x4d\x0d\xd6\x77\x47\xe5\xfc\x7a\x4b\x36\x44\x7a\x89\xe3\x88\xcd\xf4\x9b\x38\x71\xc4\xa4\x12\x3e\x8e\x56\xec\x37\x74\x71\xde\x68\x59\x82\x92\x8c\x8e\xaf\x68\xc5\x9c\xb7\x4a\x17\x71\xdf\x93\xdd\x24\x1d\x92\x61\x60\x74\xa9\x46\xab\xbe\x57\x67\xa4\x01\x91\x3d\xf7\x50\x18\xdb\x21\x7c\xd2\x62\xfe\x56\x0e\x24\x1e\x86\x89\xbb\x94\xba\x00\xf7\xd5\xf9\x86\xdb\xf7\xa0\xe5\x30\x2c\x99\x84\xd1\x1a\x84\x57\x46\xbb\x8b\x7d\xcc\x4c\x5f\x43\x0b\x0b\xdc\x83\xcc\x83\xf4\x59\xdb\x75\x37\xb1\x27\x9b\x04\x27\xac\xaa\x47\x70\xc0\x98\x5c\xd5\x80\x55\x39\x9e\x97\x70\x5d\xd3\x99\x97\x0e\x2e\x81\x34\xaf\x20\x80\x7c\xe1\x15\xdc\xb3\x4c\xfe\x0b\x84\xbf\x8e\xc6\xad\xe5\xdd\x05\x65\x81\xcb\x7b\xd8\xff\x8c\x46\x49\xee\x79\x78\x3b\x8d\x03\x2b\x8c\x3e\xab\xa2\xb1\x7c\x1c\x67\x7e\xbc\xf3\xbf\xe5\x38\x02\xe9\xbf\xcd\xca\xfd\x00\x2d\xe4\x5c\x4a\x0b\xce\x05\x5c\xdf\x21\x7f\x9a\xc5\xb7\x46\x46\xe7\xa3\x63\x74\x3a\xc9\xf8\x5f\x00\x00\x00\xff\xff\x4a\x04\x16\x93\x28\x03\x00\x00"

func tmplInfoPlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplInfoPlistTmpl,
		"tmpl/info.plist.tmpl",
	)
}

func tmplInfoPlistTmpl() (*asset, error) {
	bytes, err := tmplInfoPlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/info.plist.tmpl", size: 808, mode: os.FileMode(0644), modTime: time.Unix(1684890603, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x89, 0x57, 0x6, 0x2b, 0x50, 0x65, 0x3c, 0x57, 0x6c, 0x6e, 0x67, 0x2a, 0xe6, 0x8c, 0xe1, 0x29, 0x2a, 0xe3, 0x91, 0x32, 0xe9, 0x17, 0xc3, 0xc0, 0xfc, 0xc8, 0x2c, 0x84, 0xc0, 0x7b, 0xb4}}
	return a, nil
}

var _tmplItemsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8e\xe3\x44\x10\x3e\xbb\x9f\xa2\xa6\x25\x46\xed\x21\x38\xcb\x35\x28\x87\x90\x65\xd8\x20\xb4\x42\x33\xcc\x22\x34\x8a\x56\x1d\xbb\xec\x34\xd3\xee\xb2\xfa\x67\xbc\x10\x59\xe2\x04\x67\x9e\x80\x13\x87\x7d\x0d\x1e\x65\x9f\x80\x47\x40\xdd\x4e\x66\xd7\x33\xb0\x97\xc4\x72\x7d\xfe\xea\xab\xef\xab\xee\xf9\x05\x5b\x53\xf7\xb3\x55\xcd\xde\xc3\xdf\x6f\xe1\x70\x28\x7e\x44\x69\x87\x21\x3e\xad\x82\xdf\x93\x1d\x06\xc6\x2e\xe6\xac\x93\xe5\x9d\x6c\x10\x5a\xa9\x0c\x63\xaa\xed\xc8\x7a\x10\x2c\xe3\x68\x2d\x59\xc7\x59\xc6\x35\x35\xf1\x8f\xdc\xf8\x3b\xc7\x37\x58\x72\xc6\x32\xd9\x03\x6f\x94\xdf\x87\x5d\x51\x52\x3b\xaf\x50\x1a\xe5\xf6\x38\x97\x7d\x43\x11\xfa\x7f\xb5\x79\xe8\x2a\xe9\x91\xb3\xec\xf5\x84\xe0\x27\xda\xd3\xbc\xa1\x8a\x3c\x9a\xfb\xb9\x0c\x9e\x34\xc9\x8a\xb3\x9c\xb1\x92\x8c\xf3\x30\x7e\xf7\x0d\xed\x5e\xca\x16\x61\x09\xbc\xdc\x63\x79\x77\x49\xf6\xe6\x48\xc8\xee\xa5\x8d\xe2\x2d\x76\x14\xeb\x87\x43\xf1\x75\xe2\xbf\xc2\x8e\x86\x81\xb3\xac\xaf\x01\xe0\x42\xf6\xc5\x0f\x64\xef\x6a\x4d\x7d\x64\xaf\x83\x29\x41\x19\xe5\x45\x0e\x87\x84\x59\x82\xec\x8b\x97\xd8\x8b\xb1\x65\x64\x79\x11\x76\x22\xf2\xe6\xb3\x58\x7b\x81\xba\xbb\xb9\xfa\x36\xbd\xf9\x94\xcf\x95\x73\x01\x1d\xcf\x73\x36\x1c\xe9\x6c\x30\x23\x9b\xb4\x8d\x83\xc5\x12\xfa\xba\x58\xd9\xc6\x89\x9c\x65\xaa\x06\x8d\x46\xc4\x4a\x0e\xcb\x25\x3c\x8b\xb8\xac\xaf\x8b\x4b\xe9\xa5\xfe\x2a\x1a\x2f\x46\xfb\x93\x06\xde\x69\x94\x0e\xa1\xb3\x74\xaf\x2a\x04\x47\x2d\x82\x32\x5d\xf0\xf0\xcf\x9f\x7f\xfc\x1a\xbb\x66\x03\x63\xd9\x5e\x9a\x4a\xa3\x4d\xdd\x5a\xd9\xdd\x3a\x6f\x95\x69\xb6\x51\x8e\xf8\x70\xe4\x19\xdc\x6e\xc7\x5a\x1e\xfb\xf2\x63\x1c\x0b\x48\xc8\xbe\x86\x29\xf8\xf5\x7b\x78\xd2\x19\x85\xae\xc9\xd4\xaa\x09\x16\x85\xec\x8b\xef\xf1\x8d\x4f\xa2\x9d\xf0\x36\x60\x94\x93\x65\x9a\x9a\xe2\x3b\xab\x8c\xd7\x46\xf0\x75\xcc\x49\x99\x06\x6a\xb2\xc7\x14\x5d\x51\x14\x3c\x21\x55\x0d\x68\xed\xd1\xa2\xf5\x24\x51\x91\x7f\x91\x6a\x67\x4b\x30\x4a\x8f\xdd\x9f\xfa\x94\x58\xa2\x01\xa9\x76\x8d\xa6\xba\x44\xac\x76\xb2\xbc\x8b\x66\x67\xc3\x6c\xb4\x47\xd5\xb1\xc1\x48\x9c\xda\x3c\x0f\x28\x72\x38\x3f\x87\xb3\xbe\x2e\x36\xee\x2a\x18\xa3\x4c\x23\x26\x5b\x36\x8e\x3c\x19\xe6\x88\x3b\xce\x01\x69\x07\x41\x19\x88\x0d\x1b\x4b\xc1\x54\xa7\xd1\xca\xb6\x8a\x63\xc5\xf3\x52\xac\xa9\x6d\xa5\xa9\x04\xb9\xb4\x06\xb7\xcf\xb6\x33\x38\x39\x1f\xb1\x13\x17\xae\x82\xd9\x98\x2f\x1f\xf8\xa6\x92\x66\x50\xb6\xd5\x7f\x18\xf3\x20\xb2\x16\x3c\x79\x03\xce\x4b\xeb\x1f\x4b\x5d\xc0\x27\x8e\xcf\xe0\xe8\xdb\xf0\xd4\x9b\xd5\xbd\x54\x5a\xee\x34\x8e\xfb\xfb\x24\xee\xeb\xd0\x75\x16\x9d\xbb\xd9\x3c\xff\x20\xf0\x89\x45\x23\x11\xc8\x13\xd3\x59\x1a\xb1\xaf\xe3\x3a\x6f\x3c\xb6\x82\xaf\xcc\x49\x94\x72\x13\x5c\x11\x47\xb9\x0e\x3b\xaf\xbc\x46\xc1\xdf\xfd\xfe\x17\x90\x85\x77\xbf\xbd\x05\x4f\xa0\x8c\xf3\x52\x6b\x38\xf9\x96\xc0\xaf\xa4\x56\x95\xa8\xa5\x76\x38\xbe\x58\x05\x4f\x25\xb5\x9d\x46\x8f\x82\xf7\xc7\x45\x5e\x4c\x3e\xda\x94\x64\xc4\xb9\xec\x8b\xf8\x70\x78\x25\x75\xc0\xc5\x29\x8f\xcf\x1e\xf4\x14\x9d\x69\xf8\x70\x3a\x5e\x33\xa8\x63\x1a\x31\xa3\xd3\x51\xbb\x95\x63\x96\xdb\x64\xe1\xd9\x58\xff\xf8\x61\x2e\xc7\x45\x00\x43\x1e\x2c\x96\xd4\x18\xf5\x0b\x56\x8f\x4e\xb2\xe8\xeb\x19\x24\xee\xcf\x17\xdb\xf7\x97\x4a\xbc\xa4\x4f\x77\x54\x5c\x12\x61\x83\x89\xd5\x7f\x03\x00\x00\xff\xff\x19\xe2\xbe\x5f\xef\x05\x00\x00"

func tmplItemsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplItemsMainTmpl,
		"tmpl/items.main.tmpl",
	)
}

func tmplItemsMainTmpl() (*asset, error) {
	bytes, err := tmplItemsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/items.main.tmpl", size: 1519, mode: os.FileMode(0644), modTime: time.Unix(1659453280, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x24, 0x3a, 0xfe, 0xed, 0x4e, 0xe, 0x90, 0xd3, 0x30, 0x0, 0xd4, 0x8c, 0x5e, 0x2e, 0xc8, 0x6, 0xdf, 0xc6, 0x6c, 0xbc, 0xb6, 0x67, 0xf2, 0x41, 0xca, 0xf3, 0xca, 0x99, 0xbb, 0xf5, 0x25}}
	return a, nil
}

var _tmplReleaseYmlTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\x50\x03\xb4\x05\x46\x19\x0e\x82\xae\x30\x9a\xa2\x8e\xa3\x26\xc6\xba\xd8\xb0\xdd\xf6\x21\xe8\x54\x5a\x3a\xcb\x6c\x69\x92\x25\x29\x3b\xad\xeb\xff\x7d\xa0\x7e\x59\xb2\xdd\x65\x0b\x8a\x3d\x0c\xd3\x93\x44\x7e\x77\xfc\x78\xf7\xdd\x89\x14\x74\x89\x5d\x18\x23\x47\x6a\xb0\x25\x45\xb7\x05\xa0\xf3\x2f\xf7\x0a\x60\xbf\x2a\x34\xf9\x2b\x00\x01\x95\xce\x38\x33\x0b\x8c\x5b\xad\x4f\x72\x96\x4d\xcc\x52\xc6\xe3\x1c\x61\xac\xa6\x16\x93\xaf\x25\x7e\x49\xad\x66\x77\xe5\x17\x40\x22\xc9\x0a\xb5\x61\x52\x74\xe1\xb6\xe3\x77\x7e\xf5\xef\x3e\x54\x93\x8a\x53\x3b\x97\x7a\xd9\x85\xdb\x25\x8d\x86\x13\xc2\xa9\x45\x63\x73\x80\x4e\x85\x21\xce\x6c\xb3\xf9\x78\xb2\xd9\x14\x9e\xfd\xd2\x06\xb6\xdb\x8f\xdb\x6d\xc1\x01\x55\x8d\x70\x6a\xd0\x74\x81\x46\x96\x49\x61\xda\xd1\x02\xa3\xcf\x32\xb5\xaf\x56\xa7\x15\x22\x0f\xc1\x40\x18\x4b\x39\x87\x2b\x59\x11\x62\xf3\x2e\x98\x34\x8a\xd0\x98\x27\x4f\xab\xd1\xa6\x43\x83\x36\x55\x24\x91\x3b\x87\x00\x6b\x66\x17\xbb\x3d\x37\x77\xdd\xa4\xbf\x9b\xa9\x6d\x60\xc7\x69\x9c\x0a\x48\x05\xb3\xe0\xe2\x60\x2a\x8f\x3a\x15\x5d\x48\x64\x36\x0a\x64\x05\x7e\xdb\xf7\xfd\x3d\xd3\x11\xd5\x06\x21\x58\xa1\xb0\x4d\xbb\xef\x35\x62\x18\x2d\x24\x78\x96\x26\xe7\x27\x4f\x3e\x7d\x01\xa2\xe1\xb1\x5f\x24\xdf\xb7\x34\x09\x9d\xab\xc7\xe0\x9d\x6c\xae\x06\xd3\xeb\xb7\x17\x61\xf0\x2e\xb8\x99\x86\xa3\xde\xf4\x7a\xeb\xc1\x77\x30\x18\x83\x69\xff\xb1\x6a\xb7\x9f\x7a\xf0\xf2\x25\x9c\x94\xb0\x9b\x77\x9b\x0d\x9b\x03\x7e\x01\x3f\x10\x74\xc6\x31\xee\xcb\x18\x27\x2c\x11\x30\xa7\xdc\xe0\xc1\x46\x2f\x9c\x84\x80\x8a\x18\x14\x8d\x3e\xff\x98\xf0\xa3\x5c\x6c\x19\x8a\x26\x58\x9b\xb9\x1a\x0e\x27\xe7\x31\xd5\x6b\x26\xe0\x6a\xd8\x1b\xf7\xaf\xcf\xe9\x32\x7e\x76\xe6\xe2\x94\xdb\x10\x1e\xcf\x39\x4d\x0c\x78\xc4\x00\x59\x7b\x40\x24\xe0\x1d\x86\x19\xec\x1e\x4f\x7a\xf9\xb7\x3c\x39\x58\xcd\x13\x67\x4a\x02\x89\x34\x52\x8b\x40\x64\x6a\x55\x6a\xc1\x5f\x4b\xfd\x79\xce\xe5\xba\x8d\x77\xb8\x23\x70\xd4\x81\x5e\xc2\x51\x8a\xd5\x78\x86\x6f\xc4\xa7\x11\x3f\x80\x28\xde\x2d\x58\x1b\x56\x3c\xb5\x8c\x03\xd1\xa8\x38\x8d\x10\x4a\x11\x12\x63\x35\x13\x09\x78\x85\x4c\x51\xac\x9c\x10\x72\x71\x7a\xc0\xc4\x5c\xfa\x8a\x33\x63\x6b\xbe\xbe\x31\xe5\x94\xe3\xfb\x6d\x6f\xb3\xf1\xdf\x17\x8b\xdd\xd0\x25\x6e\xb7\xe4\x98\x1f\x9f\xf2\xb9\xc6\xb8\xa4\xe5\x81\xbf\x47\xd8\x6f\x1d\x68\x94\x6a\xcb\xe6\x34\xb2\xe7\x27\x4f\xf2\x81\x87\x2d\x75\x44\xa7\x78\x4c\x8f\x83\xa5\x92\xda\x82\x53\x2d\x71\xb2\x75\x31\xe9\xa3\xe3\xc0\x22\xd7\x94\xf6\x9a\x41\x4f\x29\x8e\xa4\x57\xb4\x04\x96\x19\x93\x48\xc6\x68\x58\x22\x48\x84\xda\x9a\x57\xab\xce\x0f\xfb\xc3\x23\x98\x2e\x10\xa2\x9a\x7f\x60\x02\x28\x8c\x7e\xeb\x4f\x3a\xa7\x30\x67\x1c\x01\x85\xf3\x17\x03\x35\x40\x61\x46\x0d\x3e\x3b\x83\x3c\x59\xf5\xb4\x76\x4e\x89\x43\x93\x1c\xd0\xad\xf2\x68\x30\xd2\x68\x8d\xdf\x1b\x8d\xde\x04\xe1\x65\xf0\x2e\x78\x33\x1c\x05\xe3\xb0\x1f\x8c\xa7\x83\xd7\x83\x7e\x6f\x1a\x84\xa3\xce\x69\x78\xd1\x9b\x04\xcf\xce\x8a\x74\x1f\x30\x54\xd4\x98\xb5\xd4\xb1\xdb\x75\x0c\x56\x42\xbe\x53\xb0\x0b\xac\x73\xf5\xf7\x18\x95\x66\xff\x90\x4e\x6f\x32\x79\x3f\x1c\x5f\x36\xc9\xec\x77\xeb\x44\x0a\x58\x31\x0a\xd7\x72\x89\x17\x1a\xd7\x30\x97\x1a\x5c\xa4\xc0\x14\x69\x73\x4d\x85\x2a\x05\x42\x5a\xaa\xd9\x37\xea\x72\xf4\xe3\x06\x33\x73\x3e\x2c\x55\xb0\x64\x36\x5a\x20\xe7\x8b\x76\x52\xc3\x17\x00\x56\xac\xde\x00\xd5\x80\xff\xb7\xb5\x9f\xd0\xd6\x9a\xa1\xac\x72\x9a\x85\xb3\x48\xe6\x2e\x52\x28\x56\xf5\x8a\xea\xf5\xc3\xb7\x93\x60\x7c\xd3\xfb\x3d\x38\xa2\xba\xdd\xe4\xa1\xd2\x7b\xfd\x4a\x79\x47\x2d\x8f\xcb\xf2\x68\x4e\x9d\x36\x2b\xda\xf5\x16\x47\x2d\xbc\x78\x11\x0c\x5f\xbb\x5e\x94\x48\xe1\x7f\x32\x0d\x89\x6d\x6a\xef\xee\xf1\x8c\x4c\x75\x84\x1e\x74\xe1\xd6\x6b\xc4\xd9\xfb\xf0\xcb\x3e\x76\x96\x8a\x98\x63\xc8\x62\x07\x77\x5d\xf2\x22\x1b\x18\x5c\x6e\xb7\xde\x01\xd8\x11\xf3\xa0\xbb\xbf\x60\x36\x47\x95\xe2\xae\x19\x31\x29\x42\x16\xa3\xb0\xcc\x7e\x2d\x7d\xf6\x76\x73\x83\x62\xaa\x19\x45\xf7\x6c\x5b\xc7\xdf\x83\xe1\xeb\xc6\xd9\x48\x00\xe1\x32\x21\x1c\x57\xc8\xcf\x63\x9c\xa5\x49\x3e\xe0\xa2\x02\x7e\xbb\x0a\xd0\xc1\x6f\x0e\x9a\xcd\xfd\x3f\xf5\xd7\x7b\x94\x2d\xd0\x34\x71\xbd\x3f\x1b\xd5\xd1\x82\xad\x30\x6b\x75\x07\x85\x50\x31\x7b\x18\x2d\xff\x1b\x53\xde\x43\xff\xae\xad\x03\xf9\x1f\xa1\xd7\x50\x7f\x39\x7f\x6f\x09\x94\x40\xaf\x0b\xb7\x47\xe5\xaa\xa8\x5d\x78\x65\xc5\x8e\xde\x5f\x3a\x7e\xed\x87\x87\x60\xbf\x54\xa0\x59\x5b\xf7\x96\x56\x86\x37\x96\x2a\xee\x28\x67\x87\xde\xfd\xf2\xf8\xf0\x73\xea\xa3\x19\xc2\x7f\xf3\xe0\x24\xe2\xda\xb9\x29\x3f\x08\x99\x85\x4c\xe4\xf3\xd3\xce\xd9\xf3\x76\x71\x41\x22\xa9\xe2\x92\xc6\xa4\xb8\x56\x10\x6a\x0c\xda\xbf\x3a\x0c\xe5\xf8\x30\xd5\xbc\xba\x2c\x25\xcc\x2e\xd2\x99\x8f\xee\x32\x53\xdd\x4f\x76\xb8\xc6\xd5\xc9\x3d\xd9\x1a\xa1\x53\x44\xb7\x51\xd3\x65\x2c\xca\xde\xfd\x67\x00\x00\x00\xff\xff\x0e\x6a\xca\x6b\xfc\x0e\x00\x00"

func tmplReleaseYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplReleaseYmlTmpl,
		"tmpl/release.yml.tmpl",
	)
}

func tmplReleaseYmlTmpl() (*asset, error) {
	bytes, err := tmplReleaseYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/release.yml.tmpl", size: 3836, mode: os.FileMode(0644), modTime: time.Unix(1668783916, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0x9c, 0xe0, 0xdb, 0x3c, 0x87, 0x82, 0x92, 0xf3, 0xc6, 0x91, 0x4a, 0x28, 0xec, 0x32, 0x66, 0xa0, 0x38, 0x36, 0x5, 0x8c, 0xb1, 0x46, 0x11, 0x73, 0x33, 0x4, 0x8b, 0xaf, 0xd2, 0x4b, 0xa1}}
	return a, nil
}

var _tmplVarsargsMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xc1\x4a\xc4\x30\x10\x86\xcf\x99\xa7\x18\x73\x4a\x16\x49\xee\xca\x1e\x8a\x77\x11\x84\x05\x4f\x32\xdb\xa6\x69\x74\x37\x53\xa6\xe9\x16\x29\x79\x20\x5f\xc3\x27\x93\xd6\x93\xb7\x9f\xef\x87\xef\xf3\x07\x78\xe2\xf1\x4b\x52\x1c\x0a\xfe\x7c\xe3\xba\xba\xb7\x40\x52\xeb\xb6\x9a\xb9\x0c\x2c\xb5\x02\x1c\x3c\x8c\xd4\x7e\x52\x0c\x78\xa5\x94\x01\xd2\x75\x64\x29\x68\x40\xe9\xfe\x42\x51\x03\x28\x5a\x50\xc7\x54\x86\xf9\xec\x5a\xbe\xfa\x2e\x50\x4e\xd3\x10\x3c\x2d\x91\x35\xa8\xf7\x7f\xef\x07\x0f\xec\x23\x77\x5c\x42\xbe\x79\x9a\x0b\x5f\x98\x3a\x0d\x16\xa0\x9f\x73\xbb\x57\x8c\xc5\x15\xd4\xa6\x77\x2f\x24\x53\x30\x76\xab\xdc\xf0\xe1\x88\xb4\xb8\xe7\xb0\x34\x12\x4f\x24\x93\xb1\x1b\x76\x27\x12\xa3\x7b\x12\x7d\x8f\xfa\x4c\xa2\xff\x68\x23\xd1\xec\x8a\x46\xe2\x64\xac\x73\xce\x82\x4a\x3d\x06\x91\x5d\x74\x73\xaf\x21\x77\xc6\x3e\xee\xe4\xee\x88\x39\x5d\xb6\xac\x1a\x29\xa7\xd6\x04\x11\x0b\xaa\x42\x85\xdf\x00\x00\x00\xff\xff\x93\xeb\x8a\x79\x2a\x01\x00\x00"

func tmplVarsargsMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplVarsargsMainTmpl,
		"tmpl/varsArgs.main.tmpl",
	)
}

func tmplVarsargsMainTmpl() (*asset, error) {
	bytes, err := tmplVarsargsMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/varsArgs.main.tmpl", size: 298, mode: os.FileMode(0644), modTime: time.Unix(1659396160, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xf5, 0x90, 0xc5, 0x63, 0x77, 0xf4, 0x58, 0xb9, 0x4d, 0xec, 0x7f, 0xc6, 0xfa, 0x8d, 0x60, 0xd3, 0x68, 0x3c, 0x73, 0x57, 0x9f, 0xc6, 0xa4, 0x6e, 0x5a, 0xcf, 0xa6, 0xb4, 0x3e, 0xbf, 0x64}}
	return a, nil
}

var _iconsUpdateAvailablePng = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xfb\x37\xd4\xdb\xff\xc7\xf7\xcc\x18\x83\x61\x22\x8c\x72\x57\xc6\x2d\x85\xca\x25\x84\x62\x64\x88\x18\x77\x91\x39\x0e\xc2\xa8\x86\x22\x21\xde\x73\x3a\xa7\x8c\x4b\xe4\x32\xba\x4c\x74\x8a\x18\x2a\xb7\x8e\x46\x29\xef\x32\xdd\xa6\x50\x28\xe4\xf6\x36\x8a\x13\x62\xe8\xc4\x48\xf8\x2e\xbe\x7f\xc2\x67\xad\xbd\xd7\xda\xeb\xb5\xd6\x7e\x3e\x9f\x8f\xe7\x5a\xfb\x87\xcd\xf2\xf4\x38\x20\x27\xa3\x2a\x03\x00\x90\xa3\xb8\x38\x51\x01\x40\x81\xb5\x2d\x25\x09\x00\x08\x8e\xaf\x8c\x04\x80\xd0\x43\x71\xda\xe7\x93\xc4\xf9\x36\x98\x52\x1b\x12\x71\xf6\xc5\xec\x4c\x1f\x45\x5b\xf7\x86\x59\x79\xbc\x42\xde\x3b\xc9\x6c\xa5\x71\x6d\x95\x73\x12\xe7\xac\x2e\xf9\x54\x6a\x6b\x87\xd9\x24\xc4\x34\x19\x1c\xbc\x1e\xf6\xa6\xdb\xcb\xd3\xcf\x61\x7b\xc0\xf3\x18\x13\x99\x2d\x41\xca\x77\xf7\x2b\x5b\xc7\x47\xd7\x59\x64\x76\xdf\x34\x65\xa2\x1b\xa1\x00\xac\x82\xcd\xf6\x78\xbc\x3c\x53\x77\x79\xf4\xb4\xc5\xb4\x7a\x7b\x44\xe8\xc7\xa0\x99\x87\xa9\xf6\xbb\x52\x5c\x12\xf3\x1f\x97\xec\xe1\x2c\xec\x49\x69\x99\x0c\x99\x41\x53\xf2\x75\xff\x87\x75\x35\x36\xb6\xf5\xcb\x28\x77\x57\xa5\x55\x3f\xb0\x41\xd9\x60\x5a\xec\x66\x97\x16\xf7\xae\x5e\xdf\x70\x0a\xaa\x80\x2a\xf4\x57\x96\x0c\x44\x52\x22\x53\x91\x36\xc3\x5e\xe4\xf9\xba\xc9\x37\xbf\x89\x8b\x89\x0a\xef\x47\xa7\x1c\x4a\x9e\x72\x96\xfd\x39\x3e\x7e\x2a\x5b\x9f\xb5\x85\x87\xe3\xd1\x85\xb3\x18\x9a\x06\xdb\xf1\xee\x22\xe1\xc6\x91\x17\x50\x04\x5c\xad\xa7\x89\x43\x99\x94\x24\xd9\x15\x69\x61\x2c\x51\xc3\xa8\x7b\xb8\xe3\x58\x0b\xbd\xb7\xb7\x50\x01\xe0\xc3\x03\x0c\x63\x77\xad\x6a\x00\x2a\xb6\x74\x77\xdb\x94\x26\x66\x05\xcb\x53\xe5\x49\x8a\xa3\x3f\x59\x5d\x65\x61\x3d\xdd\xdd\x20\x4b\xf0\x52\xde\xfe\x8b\x4d\xf4\x68\xf6\xe7\x48\x64\x9b\x62\xae\x56\x45\xce\xcd\xd7\xc6\xd0\x44\x80\x14\x07\x70\x64\x9b\xb7\xc4\xb1\x6f\xa6\xaa\x88\x77\x8b\x22\x68\x67\x85\xc6\xcf\xd0\x95\x7f\xc4\x21\x4a\xc8\x02\x34\x5e\x9e\x43\xbd\xfa\x03\x56\x61\xe6\x2a\x14\xb0\x5c\xcb\xda\x4f\x6c\x9f\x9c\x7e\xc0\x62\x35\x24\xc0\xdc\xfb\x47\x45\x8e\x9c\x26\x2b\x2c\x0f\xc3\x23\x06\x14\x59\x78\xa4\x04\x82\x2f\xaa\x5b\xed\xfa\x87\x9d\x0e\xe6\x6b\x70\x2c\x3c\x48\xea\x84\x5f\xbb\x66\x67\x69\x09\x42\xe3\xbb\xbf\xa3\x0a\xc7\x37\x21\x16\x48\x35\x9c\xc6\x6a\xf0\x79\x1f\x2f\xbc\xf3\xf4\x34\xab\x41\xc3\x88\x89\xf5\x6c\x8e\xa3\x6d\x17\x6d\xe0\x6f\xd1\x68\x8b\xdd\x53\x57\x82\x54\xc3\x9d\xfc\x40\xd5\x0e\xb4\x41\x3b\x01\xae\xc8\xe8\xa2\x6d\x53\x3c\xca\xbd\x65\x09\x1e\x60\x66\xf4\xd9\x3b\xaa\x01\xd1\x61\xe5\x05\xd4\x05\x3d\x62\x16\x88\xe8\xb6\x99\x77\xa1\x5d\xac\x2d\x8c\xb4\x1b\x20\xed\xe4\x18\x5d\x5a\xe4\x8e\x9c\x80\xbe\x6d\x3c\x1a\x9d\xbf\x37\x63\x91\x99\x15\xdd\xd3\x97\xff\x2c\x10\x2c\x6e\xc2\xac\x64\x5c\xfe\x6c\xb3\xfb\x58\xa1\xb3\xcd\x25\xb1\xaa\x16\xdb\xda\xc5\x3b\x00\xdc\xea\xbf\x14\xb0\xb4\xe2\xcf\x8f\xb1\x53\xa6\x5b\x22\xd6\x48\x30\xcd\x43\x68\xfc\xcf\x51\x54\x76\x24\xa9\x2e\x6f\xfc\x03\xf7\xdc\xfd\x83\x38\x2b\xbc\xd8\x1f\x21\xb3\x1a\xba\xaf\x62\x4d\x39\x66\x48\x47\x46\xe9\x2f\x1b\xbd\xf6\xce\xc8\x0b\xf2\x59\x55\xc1\x9e\xe6\xba\x78\x1a\xa3\x1f\xe5\x0f\xc6\x47\x0f\xbf\x33\xea\xbd\x74\x39\xe9\xec\xe1\x09\xed\x84\x70\x94\x6c\xa4\x3e\xd2\x0f\x4f\x7a\xe3\xde\x13\x1b\xd1\x76\xd2\xa9\x4a\x2d\x15\x38\xa1\x4a\x75\xfa\x9b\x8c\x88\xaa\x51\xd6\xc9\xa8\xe4\x0a\x4c\xb1\x42\x8a\x46\xd5\x06\xa2\x43\xba\x1f\xb0\x94\xef\x3f\xc1\xfd\x74\x51\x67\x2c\x92\x48\x6a\xf7\xc2\x13\xe1\x29\x3f\xc5\x8a\xeb\x47\xf2\xac\x33\x7e\xce\xbb\x0a\x65\x9f\xe2\xbd\x71\x5c\x6b\x3c\x2d\xb2\x1a\xaa\x19\x39\x2c\xb0\x56\xd5\x1f\xa3\x27\x52\x38\xb7\x3a\x8d\xa1\xaf\x8f\x55\x79\x1b\x71\xe9\xd7\xbf\x91\x39\x3a\xbd\x86\x09\x79\x55\xf5\xe0\xf6\xbc\x11\x32\x99\xa4\x1c\xa4\x68\x4c\x72\x85\x73\x31\xde\xb5\xa0\x84\xae\x15\x26\x32\x71\xd1\x70\x6a\x3a\x23\x2d\x92\xe3\x6c\x4a\x25\xe0\x69\x6e\x36\xf2\xe7\x86\xb7\x2d\x5e\x3d\xaa\x15\x86\xea\xf9\xc8\x3a\xe9\x93\x89\x15\x6d\xeb\x07\xab\x2e\xc1\xb1\x37\x23\x83\xa4\x83\x33\x87\x17\x3a\xe6\xf0\x0a\x2f\xa0\x0e\x14\xee\x36\xe1\xe6\x33\x0d\x7c\xaa\x69\x42\x46\x55\x2d\x78\x76\x05\x8e\xe3\x3a\x56\xee\x9e\xd9\x32\xdd\xfa\x2e\x99\xe8\x70\x67\xee\x0d\xf5\x82\xe7\xd7\x1d\x92\xf3\x87\x34\xb6\xfc\xd3\xa8\x02\x87\x09\x09\xe6\x47\x3e\xf4\xd8\x7d\x67\x2d\x29\xef\x70\xe5\x6c\xe5\x36\xaa\xc0\x24\xf8\x1e\xd7\xd1\xe0\x0a\x09\x3e\x4a\xbd\xe0\xc2\x6d\xc3\x32\x54\x19\x3e\x13\xf2\xae\xd3\x51\x61\xf6\x2f\xfd\x62\xe8\xa8\x29\x34\xa7\xd8\xfa\x4f\xa3\x51\x47\x7e\xfd\xc8\xc7\x68\x3a\x8a\x77\xec\x41\xf2\x31\x4c\xaa\xe6\xe5\x6b\xd6\x2e\x7d\x9f\x02\xc0\xcb\x91\x8b\x76\xc9\xf7\x30\xd0\xe9\xdb\x04\xaf\xc6\x46\x65\xf8\x3b\x33\xb7\x82\xf0\xb7\x40\x00\x0d\x2a\x1e\x35\xf0\xed\x97\xd1\x6e\x75\x73\x34\x7f\x8c\x85\xf5\xa9\x17\x0c\xbc\xaf\xc9\xd0\xa4\xcd\xbe\x9b\xb4\x85\x9b\x33\xc2\x27\xe4\x23\xa2\xbd\x51\xcd\xa5\xbd\x7b\xfd\xae\xb6\x5d\x60\x9e\xe1\x3a\x16\xfe\xbd\x1d\x2b\x8a\x47\xda\xb8\x8e\x95\x16\xf3\x68\x0f\x77\x8d\x9b\xb2\xc7\x0c\xa1\xef\xac\x6d\x2b\x65\x69\xd7\x29\xf8\xe9\x1f\xbd\x65\xdf\x4b\xbe\x43\x8f\x99\x7b\x59\xc7\x6e\xcc\x4f\x9d\x31\xf6\xb8\xec\xf6\xe3\xbf\xfd\x61\x7f\x21\x8b\xdc\x73\x4a\xd1\xff\xff\xac\x65\xe9\x3a\x0c\xf9\xb8\x74\x9e\x23\xf4\x85\x77\xa1\x74\xee\x07\x5e\x78\x1f\xf9\x9d\x75\x52\xe9\xf6\xf1\x19\x90\x88\x19\x72\x89\x9d\x60\x80\x1f\x6f\x6a\x92\x03\x65\x39\xb2\xc1\x79\xd6\x2e\x5e\x13\x22\x02\xed\x68\xd8\x3b\xad\x43\xbf\xf8\x0b\x0d\xcd\x82\x53\x5a\xb5\x38\xd1\xc1\x09\x6d\x72\xe5\x9c\x2e\xe2\x1a\x96\xfb\x64\x09\x6a\xd1\x9d\x9e\x17\x22\xfe\x7d\x89\xd8\xa1\x42\x6b\x27\xaf\x2a\x3f\x70\x92\x39\x4c\x9a\x5e\x7c\x42\x14\x6b\x54\x15\x7b\x7d\xeb\xea\x7d\xf3\x57\xf5\x4e\xde\x98\xfc\x78\x48\xba\xd3\xd4\xa7\x87\xa1\x9f\xac\x3a\x89\x6c\x8c\x89\x9b\xc6\x4d\x29\x5f\x03\xa8\x95\x79\x98\xd9\xf2\x7c\xf0\x8c\x4f\x48\x4e\xf0\xa6\xc2\x7a\xc0\x46\xf9\xa3\x7a\x36\x8e\xcf\x94\x1b\xd9\x30\x25\x87\x7c\x74\xc9\xa8\xb7\x5b\x3f\x7e\x59\xc5\x89\x1e\x4a\xbc\x2c\x3e\x5f\x97\x21\x99\xd6\xc2\x0e\x01\x6f\xa0\x74\x7d\x76\x60\x32\x21\xdd\x94\x9e\xd1\xa0\x9d\x90\x74\xc7\xf0\x5f\x7a\x5e\xd0\xe8\x34\xc9\xd3\x0f\x95\x8d\x9a\x01\xc7\xf5\x76\xbc\xbd\x34\xf1\xaf\x94\x6a\xe2\x59\x87\xcd\xd8\xda\x4d\xbc\xf3\xbd\xac\x97\xe5\x0f\xab\x1a\x16\x61\xba\xf7\x85\x57\xde\xef\xb1\xb5\xfa\xb3\xec\x55\xd1\x1f\xb9\x5b\x8b\xca\xbd\x0e\xbf\x56\x09\x04\x17\x14\xce\xa5\x47\x33\x5f\xe6\x09\x12\x25\xe4\x82\x2e\x05\xf9\xa0\x38\x07\x39\x43\x29\xfb\xf6\xd5\x98\x94\xd7\xef\x35\x2d\xb1\x76\x3a\x92\x69\x00\x9d\x84\xb2\xa2\x5e\xb3\x5d\x63\xca\x7b\xca\x08\x79\xc5\xcd\x78\x24\x18\x79\xbc\xa7\xe5\xb6\x8f\x39\x11\x56\x6a\x47\xb5\x0b\x66\x7f\x94\x55\x05\x79\x38\x8e\xa1\xe6\x8c\x20\x73\x71\x41\xe8\xb7\xba\x8c\x80\x6e\xbf\x94\x33\x4a\x70\x20\xbc\x14\x9f\xa4\xc1\xf5\x20\xb8\x6a\x68\x6f\xb8\xb5\xe3\xe5\xd9\x6d\xb3\x4d\xa1\x31\xd7\xf0\xcc\x06\x66\x0a\xcb\x9d\x3e\x8d\x49\x43\x0f\xa0\xef\x60\x4a\x5c\xd8\xb1\xe0\x96\x12\x4c\x67\xf5\xa5\x71\x73\xc6\xe4\x8b\x6b\x0e\x25\x48\x2f\x39\x23\x04\x64\x09\xce\x81\x3f\xc0\xcb\x5f\xc8\x93\xc3\xb5\x58\xd1\x35\xb8\xf8\x80\x78\x81\x5a\xd0\xa6\x63\x21\x7f\x66\x33\x43\xc8\x3f\x69\xa9\x78\x78\x20\x84\x32\x95\xee\x25\xdd\xfa\x16\x15\x8b\x0f\xde\x77\xf0\x4f\x97\x89\x8e\x34\x7e\xf8\xe2\x76\xf8\x3a\xfc\xd5\x87\x26\x2b\xe7\x0d\x54\x46\x24\x35\x3b\x0d\xe6\x25\xec\x5c\x53\x8d\xc5\x4a\xd2\xfe\x44\x42\x10\x48\xcf\x58\xe8\x2d\x98\xab\x07\x56\xac\xcb\xbb\x9b\xd1\x49\xd1\x7d\x28\x49\x43\xa8\x9c\x4f\x7a\x9c\x3f\x77\x5a\xa9\xce\xed\x23\xa9\x90\x67\x19\xd9\x82\x35\x75\x96\xa0\x77\x47\x4a\x51\x9f\xbf\xd5\xf1\xb8\x3b\x4c\xbe\x73\xd7\x30\x35\xff\xf1\x30\x3a\x09\x57\x7b\xf3\x95\x76\x7e\x89\x79\xe9\x65\xd3\x5f\x9a\xb5\x87\x2e\xe1\x26\x2a\x40\xa2\xa4\x9d\x67\xb8\x14\xc5\xfb\x53\x31\x8f\xe2\xf1\x5b\x4a\xd4\xbc\x37\xd0\xd2\xf3\x58\xa6\x18\x0d\xfb\xf1\x77\x7c\xea\x51\x48\x51\xf8\x1c\xd3\x88\x0e\x60\x36\xac\x50\x95\xd5\x5d\xef\x18\xbf\xfd\x41\x20\x37\x28\xc3\x67\xce\x68\x1e\xec\x74\x49\xc4\xad\xc8\x59\x59\xd4\xa8\x70\xb8\xe0\xa2\x04\xa1\x7d\xd2\x21\x3f\xbe\x4e\x9e\x97\x1d\x40\xb1\xaa\xbf\x22\xa3\xfd\x66\x14\xe4\xc7\x5b\x3a\xdf\xd1\xb5\xfd\xbd\x5b\xe5\xea\x3d\xe0\x37\xa2\x91\x5c\x5e\xb5\x84\x47\x06\x6f\x35\xc3\xa7\xb0\xa2\x7b\x5e\x47\x7c\xa8\xd1\x76\xaf\xa4\x1e\xc5\xb9\xfb\x82\x37\x51\xef\x6e\x5f\xa0\xe2\x39\xad\x35\x3b\x6c\x34\x5f\xf9\x60\x45\xf3\xef\xeb\x5d\x5c\x11\x45\xd9\xd9\x73\x29\xf1\xa8\x58\xb9\x66\x52\xb1\x55\xbe\x60\xf7\x06\x1e\x07\x65\xb9\xed\x7a\x30\x38\xe0\xc9\x74\x97\xd1\x95\x8b\x50\x60\x28\x63\xee\x6c\xe2\x04\x83\x9c\x47\xab\x4d\xdd\x3b\xdd\x32\xdc\x9d\x7f\x76\x1e\x06\x78\xa8\xe7\x8b\xe6\x01\x6a\xdf\x45\x49\x8f\xaf\xe3\x26\xf3\x44\xd8\x48\xb8\xd3\x89\xf2\xe3\x34\xaa\xee\x47\x6f\x76\x32\x1e\x79\x25\xac\x77\x31\xea\xdb\x8f\x50\x23\x9b\xb2\x93\xe6\x6c\x00\xa5\xad\xce\xbe\x81\xf3\x71\x86\x08\x4f\xc3\x59\x59\x1e\x5b\xb9\xa7\xe8\xd0\xf3\xae\xe5\xdf\x1e\x00\x3f\x76\x01\x99\xfa\x9a\xb8\xab\xf5\xaf\xb3\x83\x68\xab\xda\x42\x83\x7c\xaa\x55\x51\x74\xa3\xfa\x0c\x11\xf2\x5f\xa1\xb4\x99\x17\x47\x4f\x23\x83\x57\x92\x3e\x3f\x6c\xcb\x2b\x13\xec\xb9\x68\x38\xb6\x38\xb6\x51\x11\xea\x2f\xbc\x7e\xfb\x7c\x1a\x3a\xd5\x62\x64\xb6\x47\xcf\x76\xfe\xc6\x47\x3d\xbb\x15\x2d\xa4\x6c\x3e\xfc\x64\x46\xc8\x9f\x43\x7d\x4b\x9f\x83\x11\x92\x61\x67\xb7\xe7\x82\x9a\x91\xdb\xe6\x9b\x7a\x1f\xf3\xef\x49\xec\x54\xff\xd5\xb5\xe7\x92\xf8\xa7\x6d\xe7\xd9\x9b\x8e\x03\x73\x6e\xcb\x7b\xd4\xf0\x37\x04\x3b\x85\xab\x97\x6e\x37\x6a\x14\xcc\xcb\xfd\x0b\x1e\x95\xbd\xa6\x1e\x66\x3b\x98\x47\x58\x89\x97\xea\x9e\x5b\xac\x12\x61\x86\x31\x33\xe6\x35\x43\xb4\x40\x4f\x17\x66\xee\xd3\x96\xa1\xbd\x3c\x15\x18\xd3\xb6\xb1\xf2\xbc\x2c\x6e\xf5\xc6\x50\xf7\x32\xf9\xc2\x66\xb6\x74\x8c\x1f\xdb\x21\x68\x33\x61\xe5\x37\xf5\xe1\x65\x32\xee\x34\x50\x2d\x22\xe5\x39\x9f\x3f\x97\x1e\xb0\xb4\x73\xb6\xbd\x05\x63\x6b\x72\x8c\xed\x5c\x2b\x21\x28\x1a\x41\xb4\x3e\xc8\x64\xa0\x7b\xad\xe3\xf2\x6e\xd7\x4a\x08\x2e\x8d\x20\x1d\xad\x4f\xe5\xb1\xa6\x26\x71\x79\x7a\x75\x12\x99\x45\x23\x48\xc7\x9b\x06\xac\xe9\xe8\x45\x1d\xd5\xcb\x24\xcf\x6c\x59\x5c\x7a\xc9\x3c\x96\x78\x0a\x3a\x4a\xd5\x8f\xd6\x76\xd3\x0e\xdd\x4c\x58\x69\x6e\xc3\xce\x4f\x80\x43\xe5\x1e\x9d\x9e\x6c\x07\xbb\x9d\xea\xbf\xc8\x8b\x72\xf8\x1b\x01\x6c\x38\x6a\xed\xfc\xe9\x16\xc6\x96\x6d\x4d\x6e\x0d\x44\xb7\xbe\x66\x88\x54\x8e\xe5\x12\x44\x59\xdd\x86\x41\xf0\xc6\x4d\x07\xcf\x9f\x6b\x91\x25\x3a\xb0\x8c\x99\x2b\xe1\x56\xe2\x37\x73\x74\x0d\x64\x9c\xeb\x7d\x3f\x83\x64\xda\x20\x8b\x4b\xbf\x42\x4c\x84\x96\xa8\x15\x51\x9b\xdd\x68\x31\x9b\x09\x2b\xf5\x81\x80\x15\x80\x3e\x2c\x60\x88\x2a\x6a\x6b\x31\x03\x05\xd6\x64\xb7\x40\xb4\x4e\xeb\xd3\x52\x41\xa3\x06\x82\xe3\x7a\xdf\x0f\xe8\x77\xd3\x6e\x7d\x5a\xea\x83\xe3\xa9\x04\x94\x5a\xbb\x64\xfd\xf3\xcf\x5a\xb7\xdc\xbb\x33\xe0\x1a\xb3\x9f\xaa\x1f\xdd\xd4\x58\xe4\x70\xfe\x5c\x8b\xcc\xc7\xd3\x27\xe4\xe6\x1f\x97\x99\x49\x7c\x33\x64\xca\xe2\xd2\x7d\x6d\x87\xb6\x43\x6a\x05\x2f\x3c\xfd\xbb\xd6\xee\x87\x92\x3a\x9e\x60\x78\x3a\xd1\xb2\x3f\x62\x62\xa4\xc3\xad\xc4\xd5\x63\x23\xc7\x51\x03\xf8\x81\xa2\x9d\xac\xc6\x77\xf7\x37\xbe\x62\x88\xfc\xdf\xe7\x5a\xef\x6d\x69\xda\x11\x28\xeb\x5e\x6e\x48\xca\x1b\x41\x6a\xaa\x1e\xa5\xe0\x91\x89\x70\xb3\xdd\xd7\x1f\x16\xaf\x59\x08\xd2\x7a\x0f\x83\x61\xa0\xe9\x5e\xe4\xd4\x55\x45\x5f\x57\x39\x9e\x85\x4e\x92\x11\x27\x57\xe9\x5e\xf5\x1a\x74\x5d\xb3\x49\x50\x63\xa6\x58\x17\x94\xfc\xa2\x66\xea\x4e\xb8\x85\xac\x8f\x70\x93\x90\xbe\xbe\x0a\x6c\x0e\x63\xa4\x9f\x55\xda\xfb\x9a\xac\xa5\x0b\x49\xc5\x0b\x83\xa0\x23\x6a\xcc\x8e\xa2\x52\x32\xa6\x72\x3d\xd2\x64\xb8\x00\x0d\x78\xf2\xbd\x3e\xc7\x89\x72\x95\x31\xeb\x09\x0a\xdc\xe1\xd3\xb4\x09\xb4\xf8\x04\x92\xb9\xb3\x2b\xca\xc0\x77\x9d\x6c\x70\x40\xc6\x56\xc2\x5b\x05\xc0\xd8\x2f\x11\xef\xa5\xa8\xeb\xd1\x2e\x3e\xe9\x5c\x7e\x7e\x0a\xcb\xc0\xd4\x36\x16\x1a\xa8\xfa\x56\xad\x01\xf5\xbc\x8f\x44\xb2\x06\x87\x0f\xfa\x03\x30\xb3\xcd\x2e\x2b\x9e\x9a\xb8\xee\x32\x91\x2c\xfc\xa4\x45\x1b\x43\xf3\x34\xc5\x15\xcf\x46\x0d\x4c\x22\xd6\xeb\x6b\x7f\xf2\x6e\xe9\xda\x15\x19\x80\xc8\x0a\xbb\x6f\x4c\xfc\xfd\xef\xba\x40\xdf\x28\x1c\xf1\xf8\xd0\x5b\x3f\xf0\x00\xa3\xa2\x4c\x3c\x40\x36\xa8\x5a\xab\x3e\xe1\xb4\x8e\x88\x31\xa3\xd8\xa0\x0c\xe0\x14\xe6\xea\xb6\x2d\x39\x32\x05\xa7\xd7\x95\xa7\x8b\xe1\x03\x7a\xf6\x7d\x87\x50\xb6\x52\xbf\xe2\xa6\xe3\x7c\xee\x37\xaf\xf1\x0f\x4b\x94\xa2\xd2\x2c\x16\x5f\xa7\xc9\x00\xe1\xfd\xa7\xbe\x4d\x2f\xbc\x36\x3b\x6f\x5f\xe3\x50\xb4\xc5\xa4\x46\x55\xd9\xff\xfb\x00\x00\x8f\x17\xb9\xe8\x84\xdd\xb1\x6b\x2a\xd7\x84\x05\x7c\x99\xe1\xf1\x4d\x65\x40\x13\x78\x08\x48\x17\x05\x16\x51\xff\x3f\x1e\x87\x03\xbb\x96\x47\xb4\xb1\x80\x41\x12\xf5\x6c\x7d\xee\x65\xb4\xcc\x5e\x0b\x4e\x59\x51\x4a\x0a\x7f\x68\xaf\x7e\x1f\x80\x15\x89\x07\x0a\x35\xd5\x7d\xeb\xa6\xba\xc3\x65\x47\xfb\x66\x7c\xce\x1b\x42\x15\x4c\x4b\xe1\x0b\x9d\x04\xf3\x90\x75\x99\xcf\xd2\x48\x77\xdf\x4a\xa7\x29\x16\x98\x89\x43\xed\xe3\xe4\x3f\x74\x7c\x5e\x43\xb5\x6c\x8b\xfe\x2f\xae\x26\xb7\x69\xab\x3a\xa2\x87\x48\x20\x74\x98\xa3\x70\xe4\x40\x34\x67\x6f\x5b\x8d\x6f\x7a\x31\x48\xef\xe9\x08\x55\xef\x67\x2c\x8a\x2b\x71\x29\x6a\x71\x57\xf7\x51\x93\x1f\xa0\x6a\x40\xc9\xd4\xb8\xc9\x86\x25\x85\x1b\x3d\x7f\xf1\xc9\x8e\xf9\x9d\xc9\x85\x97\x4b\x27\xe9\x22\x47\x3b\x2c\xa8\x7b\xd1\xbb\x8c\x29\x3b\x95\x26\xad\x8e\x1d\xd8\xf3\xca\x5e\x50\x0d\x40\x3b\x76\xa8\x60\x74\x92\x32\xd1\xe1\x8c\xb4\xc9\xd6\x65\xf9\x97\x60\x81\x68\x9c\xff\x97\xe3\xb5\x93\x69\x21\x94\xae\x14\x1b\xb3\xcd\xf6\xb5\xcd\x78\x80\x8c\xc2\x33\x8a\x0f\x54\x0b\x7c\xee\x2c\x00\x95\x0d\x4b\xb9\x59\x06\x00\x72\x63\xb6\x5e\xb9\xbf\x08\x95\x0d\xc4\x4a\x7a\xe8\x0f\x25\x6c\xb8\x5b\x89\x86\xc4\xb6\xf5\xea\xe2\x1a\x74\xae\xce\x3f\xef\xbb\xf8\x8f\xa6\x72\x73\x7e\xee\x27\x13\x01\x3f\xfb\x33\x33\xe9\x96\x82\xa1\xc9\x21\xf9\x6a\x86\x49\xdb\xe8\xf3\xcc\x1d\x00\x7a\x09\xfd\x9e\x51\x9d\xcf\x51\xc9\x3b\xbf\xb0\x0b\x31\x45\x3e\x35\x1f\xa9\xcd\x46\x43\xe2\xe6\x78\x54\xdd\xfe\xaf\xf6\x6e\xd6\xb7\xbb\x75\x7b\x50\xa3\x70\xce\x99\x27\x51\x81\xd8\x77\x09\x78\x51\x3c\x62\x1b\x76\x6d\x0b\x65\x57\xbf\x53\x70\x75\x9d\xaa\x78\xb8\x39\xb4\x79\x0a\x0d\x7a\x41\xf3\xb5\xcb\x6a\xe2\xb4\x3f\x46\xdd\x12\x66\xbd\x69\xca\x0c\x02\x76\xb0\xce\x86\x8c\x3a\x75\x77\xab\xdd\xc6\x66\xe5\x05\x62\x5e\xf2\x5e\x47\xe3\x9a\x50\xe7\xd8\x09\xaf\xcb\x85\x58\x60\x66\x29\x0a\xa4\x19\xd6\x9d\xe8\x73\xa4\x74\xb9\x7c\x1d\x74\x48\x3d\x68\x87\x09\x08\xfd\xef\x29\x55\xc5\xa1\x67\x14\xc6\x41\x24\xfe\x98\xd2\xb4\xdd\x9d\xc6\x26\xc5\x24\x3c\x43\x2a\x8e\x72\xc2\xb0\x8a\x0a\x42\x72\x01\x1d\x0a\x61\x9d\x95\x9c\x76\x51\x3b\x60\x34\xb0\x1d\x9e\x85\xdd\x98\x1d\xde\x73\x09\xbb\x7d\xb7\x41\xf7\xe4\xf8\x7b\xa5\xd3\xf1\x49\x24\x51\x74\xd8\x5e\x66\xb7\x84\x1a\xcb\xe6\x84\x96\xf4\x94\xdb\x40\x6d\x43\x1e\xe5\x49\xdf\xe7\xba\xad\x9e\x81\x63\x8a\x3d\x2a\xea\x78\x75\x94\xb1\x87\xda\x01\xd5\x5e\x77\xfe\xb7\xa6\x55\x4d\x71\x29\x3f\x10\x4a\x56\x76\xa8\x21\x30\x40\x5c\xe6\x67\x4f\x61\xa1\x30\xd1\x10\x43\xf1\x4e\x92\xe7\x69\x8a\x89\x0c\xf3\xb3\xb1\x9d\x81\x8d\x0f\x89\x70\xb8\x86\x70\x57\x77\x1a\x3c\xa4\x98\xfb\x38\xa3\xe9\xcf\xbb\x1b\xc7\xa8\x36\xb1\x92\xd3\xb8\x34\xa9\x01\xb9\x01\x99\x54\x35\xde\xf5\xcc\x99\x1c\x33\xc1\x3d\xd8\xb7\x9e\x25\x0e\x1b\xb6\xfb\xba\x68\x46\xc3\x21\x64\x78\x9e\xff\xf2\x3c\x19\x46\xd3\x86\xf8\xad\x1a\x39\x1f\x72\xdd\xf9\x47\x52\x26\xf5\x35\x73\x15\xbf\x53\x37\xc8\x63\xd2\x1d\x1f\x46\xfd\x4f\xff\x42\xdd\xe8\x98\xd5\x0d\x02\xb4\xd9\xe4\x17\x8e\xf4\x10\x00\x00\x50\xc8\x1e\x4e\xf7\xf6\xd3\xfe\xf8\xbf\x00\x00\x00\xff\xff\x65\x68\xf2\x4f\x10\x0f\x00\x00"

func iconsUpdateAvailablePngBytes() ([]byte, error) {
	return bindataRead(
		_iconsUpdateAvailablePng,
		"icons/update-available.png",
	)
}

func iconsUpdateAvailablePng() (*asset, error) {
	bytes, err := iconsUpdateAvailablePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icons/update-available.png", size: 3856, mode: os.FileMode(0644), modTime: time.Unix(1657375458, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xdc, 0xcf, 0x7e, 0x97, 0xb0, 0x94, 0x8d, 0xef, 0xed, 0x6f, 0x33, 0xa8, 0x1d, 0xfd, 0x41, 0x7e, 0xbf, 0xd5, 0x65, 0xcc, 0x17, 0xc8, 0x95, 0x54, 0xa3, 0xcc, 0x51, 0x27, 0x7a, 0xf2, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/ak.json.tmpl":          tmplAkJsonTmpl,
	"tmpl/cliitems.main.tmpl":    tmplCliitemsMainTmpl,
	"tmpl/cliitems.root.tmpl":    tmplCliitemsRootTmpl,
	"tmpl/cliitems.update.tmpl":  tmplCliitemsUpdateTmpl,
	"tmpl/dotenv.tmpl":           tmplDotenvTmpl,
	"tmpl/info.plist.tmpl":       tmplInfoPlistTmpl,
	"tmpl/items.main.tmpl":       tmplItemsMainTmpl,
	"tmpl/release.yml.tmpl":      tmplReleaseYmlTmpl,
	"tmpl/varsArgs.main.tmpl":    tmplVarsargsMainTmpl,
	"icons/update-available.png": iconsUpdateAvailablePng,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"icons": {nil, map[string]*bintree{
		"update-available.png": {iconsUpdateAvailablePng, map[string]*bintree{}},
	}},
	"tmpl": {nil, map[string]*bintree{
		"ak.json.tmpl":         {tmplAkJsonTmpl, map[string]*bintree{}},
		"cliitems.main.tmpl":   {tmplCliitemsMainTmpl, map[string]*bintree{}},
		"cliitems.root.tmpl":   {tmplCliitemsRootTmpl, map[string]*bintree{}},
		"cliitems.update.tmpl": {tmplCliitemsUpdateTmpl, map[string]*bintree{}},
		"dotenv.tmpl":          {tmplDotenvTmpl, map[string]*bintree{}},
		"info.plist.tmpl":      {tmplInfoPlistTmpl, map[string]*bintree{}},
		"items.main.tmpl":      {tmplItemsMainTmpl, map[string]*bintree{}},
		"release.yml.tmpl":     {tmplReleaseYmlTmpl, map[string]*bintree{}},
		"varsArgs.main.tmpl":   {tmplVarsargsMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
